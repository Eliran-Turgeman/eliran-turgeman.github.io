<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elt</title>
  
  
  <link href="https://eliran-turgeman.github.io/atom.xml" rel="self"/>
  
  <link href="https://eliran-turgeman.github.io/"/>
  <updated>2023-07-15T07:33:58.840Z</updated>
  <id>https://eliran-turgeman.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Demystifying the Importance of Idempotency in AWS Lambda // A Bug Hunt Tale</title>
    <link href="https://eliran-turgeman.github.io/2023/07/15/idempotency-aws-lambda/"/>
    <id>https://eliran-turgeman.github.io/2023/07/15/idempotency-aws-lambda/</id>
    <published>2023-07-15T07:23:14.000Z</published>
    <updated>2023-07-15T07:33:58.840Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wrote about the <a href="https://www.16elt.com/2023/07/12/aws-lambda-pitfalls/">AWS Lambda bad practices</a>, and one of them was a bit more personal for me than the others.</p><p>In that post, I talked about how lambda should be idempotent because there’s no guarantee an event will be sent out only once in some cases.</p><p>This is the story about how violating this practice can cause horrible bugs which take days to reproduce and make sense of.</p><p>I’ll go over the issue itself, and how I managed to debug it in non-standard ways, but first you will need some context of the system we are working on.</p><hr><h4 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h4><p>Idempotency is a trait of an operation.<br>An idempotent operation is an operation that, if applied multiple times, doesn’t change the result beyond the first result.</p><p>To illustrate, the bellow addition function is idempotent.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> (a, b):</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>And the following is an example of a function which is not idempotent.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_one</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Application-Introduction"><a href="#Application-Introduction" class="headerlink" title="Application Introduction"></a>Application Introduction</h2><p>The application has 3 important parts - The UI, S3, and Lambda.<br>In S3, we have an object which stores metadata about an item.<br>The object is of the following structure.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  objectId: &#123;</span><br><span class="line">    property1: ...,</span><br><span class="line">    property2: ...,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The lambda was partly responsible for transforming that metadata object, and the UI was consuming it and rendering the metadata properties of an item.</p><p><img src="/../idempotency-aws-lambda/idempotency-lambda-flow.webp"></p><p>There’s just a single complication - the object ids we used as keys for the metadata object had two formats.</p><p>Essentially, each item had an id coming from a downstream package we developed, and another id that we showed in the UI.</p><p>Meaning that there was a mapping between these different id formats, and the lambda was responsible for transforming the metadata object to contain the UI-compatible ids.</p><p><img src="/../idempotency-aws-lambda/idempotency-lambda-transformation.webp"></p><h2 id="The-Nasty-Bug"><a href="#The-Nasty-Bug" class="headerlink" title="The Nasty Bug"></a>The Nasty Bug</h2><p>It was a chill morning, before I got tagged on that massive Slack thread, and asked to take a look at a weird behavior in production.</p><p>I know that area well, I thought, one hour and I am back to doing whatever I was doing before, calmly.</p><p>Little did I know, I was about to spend a few days solving it.</p><p>The Bug: Users have complained that some of their items don’t have any metadata.</p><p>Well, there’s one S3 object and a single lambda that can be responsible for that, or so I thought.<br>I looked around, no recent code changes, the code that does the transformation isn’t new, it was always working, why would it break now out of nowhere?</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>At that point, I have to say that I haven’t even considered idempotency to be the reason for that bug - so I was looking for other places in the flow that might have changed the same object.</p><p>The problem? that’s the flow (roughly)</p><p><img src="/../idempotency-aws-lambda/idempotency-lambda-debugging-flow.webp"></p><p>Essentially, between creating the metadata object in the downstream package, and transforming it in the lambda, there were tons of other lambdas that were invoked.</p><p>I started looking for all the lambdas in the middle that had access to that S3 object, it didn’t minimize the search pool by much, so I started diving into the code, looking for any puts or posts for S3.</p><p>I did that for a few lambdas until I realized it is going to take too long. I have to find a faster way to understand who’s responsible for changing that object.</p><h2 id="Debugging-2-0"><a href="#Debugging-2-0" class="headerlink" title="Debugging 2.0"></a>Debugging 2.0</h2><p>After spending a day trying to reproduce or make some sense of the issue, I haven’t made any real progress.</p><p>Instead of me looking for lambdas that might have changed the object in S3, I figured that S3 can just tell me which lambda changed the object via S3 notifications.</p><p>I set up an S3 notification for objects created events and applied filtering by prefix and suffix so that the event match exactly the object I looked for.<br>I created an SQS which will receive these notifications from S3 and that was it!</p><p>With that setup ready, I triggered the flow, hopeful that I am close to solving this, then I saw a surprising result.</p><p>A few messages arrived in the queue, where I was expecting only one. Each message contained the IAM role name of the lambda that had modified the S3 object.</p><p>I opened these events, first access - S3 object modified from the transformation lambda - 50KB size</p><p>second access - S3 object modified from the transformation the transformation lambda (once again!!) - 0KB size.</p><blockquote><p>“WTF?”</p></blockquote><h2 id="Idempotency-is-Important"><a href="#Idempotency-is-Important" class="headerlink" title="Idempotency is Important"></a>Idempotency is Important</h2><p>Realizing the same lambda was invoked twice with the same event, focused my attention on the function inside that lambda that is doing the id translation.</p><p>After reading the function, everything made sense, this function was clearly not idempotent, and calling it twice would result in an empty object - which explains why the S3 object size was 0KB after the second access, and why there were missing metadata in the UI!</p><p>To illustrat this in code, the translation function was equivalent to the following function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">transform_keys</span>(<span class="params">mapping, obj</span>):</span><br><span class="line">    transformed = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> obj.keys():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> mapping:</span><br><span class="line">            transformed[mapping[key]] = obj[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transformed</span><br></pre></td></tr></table></figure><p>Assuming the following mapping</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">    &quot;id_format_1_1&quot;: &quot;id_format_2_1&quot;,</span><br><span class="line">    &quot;id_format_1_2&quot;: &quot;id_format_2_2&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the below object</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    &quot;id_format_1_1&quot;: &quot;value1&quot;,</span><br><span class="line">    &quot;id_format_1_2&quot;: &quot;value2&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then let’s execute the following.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transformed_once = transform_keys(mapping, obj)</span><br><span class="line">transformed_twice = transform_keys(mapping, transformed_once)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Transformed once result: <span class="subst">&#123;transformed_once&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Transformed twice result: <span class="subst">&#123;transformed_twice&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>And the results are already known.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Transformed once result: &#123;&#x27;id_format_2_1&#x27;: &#x27;value1&#x27;, &#x27;id_format_2_2&#x27;: &#x27;value2&#x27;&#125;</span><br><span class="line">Transformed twice result: &#123;&#125;</span><br></pre></td></tr></table></figure><hr><p>At this point, it was pretty straightforward to find the correct fix and call it a day, the bug is solved.</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Just to be technically accurate, usually when you are referring to the idempotency principle in lambdas you wary of the possibility that an event will be passed more than once, and it is a pretty random event.</p><p>In our case, there was a different issue in our system that led the event to arrive twice at the lambda consistently.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Idempotency is a real concern, debugging related issues is difficult, and you should design your function to be idempotent from the get-go.</p><p>Personally, I feel like solving this bug matured me as an engineer since I had to be more resourceful than usual with my debugging skills.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently wrote about the &lt;a href=&quot;https://www.16elt.com/2023/07/12/aws-lambda-pitfalls/&quot;&gt;AWS Lambda bad practices&lt;/a&gt;, and one of them </summary>
      
    
    
    
    
    <category term="aws" scheme="https://eliran-turgeman.github.io/tags/aws/"/>
    
    <category term="lambda" scheme="https://eliran-turgeman.github.io/tags/lambda/"/>
    
    <category term="bug hunt" scheme="https://eliran-turgeman.github.io/tags/bug-hunt/"/>
    
    <category term="idempotency" scheme="https://eliran-turgeman.github.io/tags/idempotency/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambda - Pitfalls</title>
    <link href="https://eliran-turgeman.github.io/2023/07/12/aws-lambda-pitfalls/"/>
    <id>https://eliran-turgeman.github.io/2023/07/12/aws-lambda-pitfalls/</id>
    <published>2023-07-12T14:49:46.000Z</published>
    <updated>2023-07-14T15:21:20.396Z</updated>
    
    <content type="html"><![CDATA[<p>I recently changed teams in the company I am working for, and I was pleased to learn that once in 2 weeks, a member of the team had to come up with a tech-related topic and give a talk about to the rest of the team.</p><p>I took that opportunity, and decided to talk about all of the different ways we suck (PC equivalent is “can improve”) at writing a lambda-based application and suggested some action items (that obviously went for the backlog for some time to chill).</p><p>Nonetheless, I think there’s a great value in fixing these bad practices, as they affect real metrics such as cost and performance, and the developers will to live.</p><p>Anyway, let’s get into it.</p><h2 id="Pitfall-1-Lambda-Monolith"><a href="#Pitfall-1-Lambda-Monolith" class="headerlink" title="Pitfall #1: Lambda Monolith"></a>Pitfall #1: Lambda Monolith</h2><p>I put it first, since that’s the one pattern I have the strongest feelings for (hate in simple terms). Making lambda monoliths is so easy and tempting but the results are truly hideous.</p><p>What is a lambda monolith? Imagine a lambda that can be invoked with different types of events and do different things depending on the event.</p><p>Each event has its own handler, and there’s a mapping between the event type and the handler.</p><p><img src="/../aws-lambda-pitfalls/lambda-monolith.png"></p><p>Besides the known disadvantages of using a monolithic architecture, there are more disadvantages to consider when talking about a lambda monolith.</p><h3 id="Overly-Privileged-Lambdas"><a href="#Overly-Privileged-Lambdas" class="headerlink" title="Overly Privileged Lambdas"></a>Overly Privileged Lambdas</h3><p>In AWS, you manage permissions via IAM roles, and it’s a best practice to give the least number of permissions to a service in order for it to function.</p><p>In case of a lambda monolith, it might be harder to follow that practice, since for example, action #1 might only require S3 access, while action #2 only require RDS access.<br>In that case, the lambda monolith, will have both S3 and RDS access permissions.</p><p>The larger the permission set, the bigger the attack surface is.</p><h3 id="Cold-Start-amp-Deployments"><a href="#Cold-Start-amp-Deployments" class="headerlink" title="Cold Start &amp; Deployments"></a>Cold Start &amp; Deployments</h3><p>The bigger the lambda monolith, the longer it takes to cold-start, and to deploy new versions.</p><h3 id="Memory-Configurations"><a href="#Memory-Configurations" class="headerlink" title="Memory Configurations"></a>Memory Configurations</h3><p>When creating a lambda, you have to specify how much memory it should have, and the more memory it has, the bigger the price per 1ms of execution.</p><p>Imagine a scenario where action #1 is fairly simple and doesn’t require much memory, so you go with the lowest tier.<br>The problem is, action #2 is memory consuming and consistently getting OOM (Out of Memory) errors, so you bump the memory configuration - resulting in higher costs for all different actions in your lambda monolith.</p><p>This can drastically affect your lambda costs, depending on the action that is the most memory consuming.</p><h3 id="Monitoring-amp-Debugging"><a href="#Monitoring-amp-Debugging" class="headerlink" title="Monitoring &amp; Debugging"></a>Monitoring &amp; Debugging</h3><p>Since you have one big lambda monolith, it is harder to understand what kind of action failed when the lambda reports a failure.</p><p>You don’t get granular monitoring OOTB (out of the box) per action, but per lambda. meaning that if you want to see the number of invocations and execution time of your lambda it will be aggregated across all of the different actions, and it will be harder to understand the specific metric properties per action (which is far more valuable).</p><p>Of course, you can try and use your monitoring &amp; tracing tool SDK in order to create some sort of a label for each action, but come on, it shouldn’t be that hard.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The only solution here is to separate the lambda monolith into multiple lambdas using the strangler pattern. have one event type, and one action per lambda.</p><p>This is not only a good practice to make your software “cleaner”, but also has real effects on your lambda performance and cost.</p><h2 id="Pitfall-2-Lambdas-Calling-Lambdas"><a href="#Pitfall-2-Lambdas-Calling-Lambdas" class="headerlink" title="Pitfall #2: Lambdas Calling Lambdas"></a>Pitfall #2: Lambdas Calling Lambdas</h2><p>To emphasize, the real problem happens when a lambda is synchronously calling another lambda, and essentially waits for its result in order to continue its own execution.</p><p>Let’s look at an example from AWS documentation.</p><p><img src="/../aws-lambda-pitfalls/lambda-call-lambda.webp"></p><p>In the above example, the lambda responsible for creating the order synchronously calls the process payment lambda, which synchronously calls a create invoice lambda.</p><p>This flow is perfectly fine in a single application on a server, but for a distributed serverless architecture there are a few problems to consider.</p><h3 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h3><p>With lambda, you pay for execution duration, every additional 1ms of invocation duration means a bigger bill.</p><p>The problem with the above pattern, is that when the create order lambda is waiting for the process payment lambda response, you are paying for the execution time of both, and the same goes for the create invoice lambda - the waiting time for a response also counts for the bills even though the waiting lambda didn’t do work.</p><h3 id="Bottleneck"><a href="#Bottleneck" class="headerlink" title="Bottleneck"></a>Bottleneck</h3><p>When using this pattern, the slowest task, like processing payments, can hold up the entire workflow, including faster tasks like creating invoices.</p><h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><p>Since the lambdas are calling each other, all error handling &amp; retries should be handled by each caller lambda.</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>According to AWS docs, there are two ways to overcome this pattern.<br>One is by using SQS between the lambda functions, that way we decouple the lambdas so that they don’t become a bottleneck for each other, while also reducing the costs.</p><p>Another approach would be to use Step Functions, which a is a serverless orchestration service that can robustly handle the errors and retries of the lambdas.</p><p>That way the lambda can contain only the business logic.</p><p>It is also common to combine between the approaches, and have a Step Function orchestrating the workflow, that includes SQS between lambdas.</p><h2 id="Pitfall-3-Idempotency"><a href="#Pitfall-3-Idempotency" class="headerlink" title="Pitfall #3: Idempotency"></a>Pitfall #3: Idempotency</h2><p>One of the design principles of Lambda is idempotency. This means that receiving the same event multiple times does not change the result beyond the first time the event was received.</p><p>Since there’s no guarantee that the same event will be sent only once to a lambda, it is critical that you design your function to be idempotent.</p><p>Let’s take a simple example of a lambda, which is responsible for adding users to your DynamoDB table. Given a username and id, your lambda adds it to the Users table, as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">dynamodb = boto3.resource(<span class="string">&#x27;dynamodb&#x27;</span>)</span><br><span class="line">table = dynamodb.Table(<span class="string">&#x27;Users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    user_id = event[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    user_name = event[<span class="string">&#x27;user_name&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    table.put_item(</span><br><span class="line">        Item=&#123;</span><br><span class="line">            <span class="string">&#x27;UserId&#x27;</span>: user_id,</span><br><span class="line">            <span class="string">&#x27;UserName&#x27;</span>: user_name</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>The problem here is that if the same event goes into the lambda twice, you will have data duplication in your DynamoDB table.</p><p>To fix it, you’d change your code as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    user_id = event[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    user_name = event[<span class="string">&#x27;user_name&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    table.put_item(</span><br><span class="line">        Item=&#123;</span><br><span class="line">            <span class="string">&#x27;UserId&#x27;</span>: user_id,</span><br><span class="line">            <span class="string">&#x27;UserName&#x27;</span>: user_name</span><br><span class="line">        &#125;,</span><br><span class="line">        ConditionExpression=<span class="string">&#x27;attribute_not_exists(UserId)&#x27;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>That was a pretty simple example, and it might not seem critical if in that case there’s data duplication, but I think that if you take a close look at your systems, you will find multiple places where idempotency is critical, so make sure you design for its.</p><hr><p>Anyway, these are 3 pitfalls I often encounter in lambda-based applications, obviously there are more, and I will leave some links for further reading in the references section.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://docs.aws.amazon.com/lambda/latest/operatorguide/anti-patterns.html">Anti-patterns in Lambda-based applications - AWS Lambda (amazon.com)</a></p></li><li><p><a href="https://aws.amazon.com/blogs/compute/handling-lambda-functions-idempotency-with-aws-lambda-powertools/">Handling Lambda functions idempotency with AWS Lambda Powertools | AWS Compute Blog (amazon.com)</a></p></li><li><p><a href="https://docs.aws.amazon.com/lambda/latest/operatorguide/design-principles.html">Design principles - AWS Lambda (amazon.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently changed teams in the company I am working for, and I was pleased to learn that once in 2 weeks, a member of the team had to co</summary>
      
    
    
    
    
    <category term="aws" scheme="https://eliran-turgeman.github.io/tags/aws/"/>
    
    <category term="lambda" scheme="https://eliran-turgeman.github.io/tags/lambda/"/>
    
    <category term="bad practices" scheme="https://eliran-turgeman.github.io/tags/bad-practices/"/>
    
  </entry>
  
  <entry>
    <title>Setting Up Automatic Linting and Type Checking (Python, GHA)</title>
    <link href="https://eliran-turgeman.github.io/2023/05/19/setting-up-gha-python/"/>
    <id>https://eliran-turgeman.github.io/2023/05/19/setting-up-gha-python/</id>
    <published>2023-05-19T16:06:40.000Z</published>
    <updated>2023-05-20T07:40:36.033Z</updated>
    
    <content type="html"><![CDATA[<p>I work with open-source &amp; private Python projects on GitHub on a daily basis.<br>I use Github Actions to run my tests, linting, static type checking, and other CI&#x2F;CD tasks.  </p><p>In this short guide I wanted to share my go-to tools and configurations for setting up my projects.<br>Here, I will mostly focus on setting up linting with <a href="https://github.com/charliermarsh/ruff">ruff</a> and static type checking with <a href="https://github.com/python/mypy">mypy</a>.</p><p>The main goal is to be able to run both ruff and mypy on every pull request, and every push to the main branch.<br>Additionally we would want to be able to run these tools locally, with the same configuration so that we get consistent results locally &amp; remote.</p><h2 id="Step-1-Install-dependencies"><a href="#Step-1-Install-dependencies" class="headerlink" title="Step 1 - Install dependencies"></a>Step 1 - Install dependencies</h2><p>I personally love using pipenv, so in that case create&#x2F;open a Pipfile in the root of your project and copy the following contents:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.python.org/simple&quot;</span></span><br><span class="line">verify_ssl = true</span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line">ruff = <span class="string">&quot;*&quot;</span></span><br><span class="line">mypy = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>This basically specifies that our project has two dev dependencies of latest ruff &amp; mypy.</p><p>In order to install these dependencies, simply run <code>pipenv install --dev</code>.</p><h2 id="Step-2-Configure-the-tools"><a href="#Step-2-Configure-the-tools" class="headerlink" title="Step 2 - Configure the tools"></a>Step 2 - Configure the tools</h2><p>As one of our goals was to have consistent results between remote &amp; local executions, I like having a configuration file for all of the tools, which means I like having a <code>pyproject.toml</code>.</p><p>Create&#x2F;open your <code>pyproject.toml</code> file in the root of your project and copy the following contents:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[tool.mypy]</span><br><span class="line">strict = true</span><br><span class="line"></span><br><span class="line">[tool.ruff]</span><br><span class="line"><span class="comment"># Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.</span></span><br><span class="line">select = [<span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>]</span><br><span class="line">ignore = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow autofix for all enabled rules (when `--fix`) is provided.</span></span><br><span class="line">fixable = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;ANN&quot;</span>, <span class="string">&quot;ARG&quot;</span>, <span class="string">&quot;BLE&quot;</span>, <span class="string">&quot;COM&quot;</span>, <span class="string">&quot;DJ&quot;</span>, <span class="string">&quot;DTZ&quot;</span>, <span class="string">&quot;EM&quot;</span>, <span class="string">&quot;ERA&quot;</span>, <span class="string">&quot;EXE&quot;</span>, <span class="string">&quot;FBT&quot;</span>, <span class="string">&quot;ICN&quot;</span>, <span class="string">&quot;INP&quot;</span>, <span class="string">&quot;ISC&quot;</span>, <span class="string">&quot;NPY&quot;</span>, <span class="string">&quot;PD&quot;</span>, <span class="string">&quot;PGH&quot;</span>, <span class="string">&quot;PIE&quot;</span>, <span class="string">&quot;PL&quot;</span>, <span class="string">&quot;PT&quot;</span>, <span class="string">&quot;PTH&quot;</span>, <span class="string">&quot;PYI&quot;</span>, <span class="string">&quot;RET&quot;</span>, <span class="string">&quot;RSE&quot;</span>, <span class="string">&quot;RUF&quot;</span>, <span class="string">&quot;SIM&quot;</span>, <span class="string">&quot;SLF&quot;</span>, <span class="string">&quot;TCH&quot;</span>, <span class="string">&quot;TID&quot;</span>, <span class="string">&quot;TRY&quot;</span>, <span class="string">&quot;UP&quot;</span>, <span class="string">&quot;YTT&quot;</span>]</span><br><span class="line">unfixable = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exclude a variety of commonly ignored directories.</span></span><br><span class="line">exclude = [</span><br><span class="line">    <span class="string">&quot;.bzr&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.direnv&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.eggs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.hg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.mypy_cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.nox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.pants.d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.pytype&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.ruff_cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.svn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.tox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.venv&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__pypackages__&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;buck-out&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;venv&quot;</span>]</span><br><span class="line"></span><br><span class="line">line-length = <span class="number">120</span></span><br></pre></td></tr></table></figure><p>To read more about the configurations options, refer to the respective docs:</p><ul><li><a href="https://beta.ruff.rs/docs/configuration/">ruff configuration docs</a></li><li><a href="https://mypy.readthedocs.io/en/stable/config_file.html">mypy configurations docs</a></li></ul><h2 id="Step-3-Setting-up-a-remote-workflow-with-GHA"><a href="#Step-3-Setting-up-a-remote-workflow-with-GHA" class="headerlink" title="Step 3 - Setting up a remote workflow with GHA"></a>Step 3 - Setting up a remote workflow with GHA</h2><p>After step 2, you should be able to run both ruff &amp; mypy locally.<br>Now you will set an automatic workflow on GitHub, which will run ruff &amp; mypy whenever a PR is opened and&#x2F;or there was a push to the main branch.</p><p>Create a file <code>linting_and_type_check.yaml</code> under <code>.github/workflows</code> and copy the following contents:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lint_and_type_check</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">ruff:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">chartboost/ruff-action@v1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mypy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="number">3.8</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pipenv</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">pipenv</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pipenv</span> <span class="string">install</span> <span class="string">--dev</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">mypy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pipenv</span> <span class="string">run</span> <span class="string">mypy</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>If the above syntax is a bit mysterious, you can go through the <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">syntax docs</a>. </p><p>As soon as you will push the above file, you will see the actions being triggered.<br>Verify that both ruff and mypy executed successfully, and that they have consistent results with your local executions.</p><p>On GitHub, it should look like the following</p><p><img src="/../setting-up-gha-python/ruff_action.png"></p><p><img src="/../setting-up-gha-python/mypy_action.png"></p><hr><p>Feel free to tweak this process with your own favorite tools, and if you have any questions you can reach out to me on <a href="https://twitter.com/_eltur">twitter</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I work with open-source &amp;amp; private Python projects on GitHub on a daily basis.&lt;br&gt;I use Github Actions to run my tests, linting, stati</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://eliran-turgeman.github.io/categories/CI-CD/"/>
    
    
    <category term="GitHub Actions" scheme="https://eliran-turgeman.github.io/tags/GitHub-Actions/"/>
    
    <category term="CI/CD" scheme="https://eliran-turgeman.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Taming the Nested Beast</title>
    <link href="https://eliran-turgeman.github.io/2023/03/24/nested-code-and-complexity/"/>
    <id>https://eliran-turgeman.github.io/2023/03/24/nested-code-and-complexity/</id>
    <published>2023-03-24T14:08:55.000Z</published>
    <updated>2023-05-19T16:05:06.812Z</updated>
    
    <content type="html"><![CDATA[<p>I believe that the downsides of overly nested code are well known and covered, it mainly revolves around readability and maintainability, and I won’t go into more details in regards to that.</p><p>I’d like to focus on the techniques to flatten an overly nested code, but before doing so, you should keep in mind that flattening your code isn’t always the answer, as it has some disadvantages as well, for example:</p><p>Expressiveness: In some situations, nested code can more accurately reflect the logical structure of the problem being solved.</p><p>Loss of context: When flattening code, you may end up creating multiple small functions, which can make it harder to follow the flow of logic and understand the context in which these functions are called. This might lead to a situation where developers need to jump between functions to grasp the entire process, which could decrease readability.</p><hr><p><img src="/../nested-code-and-complexity-images/nested-code-comic.webp"></p><h2 id="The-Problem-Overly-Nested-Code"><a href="#The-Problem-Overly-Nested-Code" class="headerlink" title="The Problem: Overly Nested Code"></a>The Problem: Overly Nested Code</h2><p>Consider the following Python code, which processes a list of data items and extracts a list of tuples containing the id and tag of each item based on specific conditions:</p><p>The value of the item must be greater than a given threshold.<br>The category of the item must be either “A”, “B”, or “C”.<br>The tags field must be present in the item.<br>The extracted tag must start with the string “important”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data, threshold</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&quot;value&quot;</span>] &gt; threshold:</span><br><span class="line">            <span class="keyword">if</span> item[<span class="string">&quot;category&quot;</span>] <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;tags&quot;</span> <span class="keyword">in</span> item:</span><br><span class="line">                    <span class="keyword">for</span> tag <span class="keyword">in</span> item[<span class="string">&quot;tags&quot;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> tag.startswith(<span class="string">&quot;important&quot;</span>):</span><br><span class="line">                            result.append((item[<span class="string">&quot;id&quot;</span>], tag))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>While this code works, its deeply nested structure makes it hard to read, maintain, and debug. Let’s improve it by applying three flattening strategies.</p><h3 id="Step-1-Embrace-early-returns"><a href="#Step-1-Embrace-early-returns" class="headerlink" title="Step 1: Embrace early returns"></a>Step 1: Embrace early returns</h3><p>Reduce nesting by using early returns to exit loops or skip iterations when a condition isn’t met.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data, threshold</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&quot;value&quot;</span>] &lt;= threshold:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&quot;category&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;tags&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> item[<span class="string">&quot;tags&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> tag.startswith(<span class="string">&quot;important&quot;</span>):</span><br><span class="line">                result.append((item[<span class="string">&quot;id&quot;</span>], tag))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Step-2-Break-it-down"><a href="#Step-2-Break-it-down" class="headerlink" title="Step 2: Break it down"></a>Step 2: Break it down</h3><p>Divide the deeply nested code into smaller, more digestible functions or components. This promotes modularity and makes it easier to test and debug.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_item</span>(<span class="params">item, threshold</span>):</span><br><span class="line">    <span class="keyword">return</span> item[<span class="string">&quot;value&quot;</span>] &lt;= threshold <span class="keyword">or</span> item[<span class="string">&quot;category&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_tags</span>(<span class="params">item</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> item[<span class="string">&quot;tags&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> tag.startswith(<span class="string">&quot;important&quot;</span>):</span><br><span class="line">            result.append((item[<span class="string">&quot;id&quot;</span>], tag))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data, threshold</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> filter_item(item, threshold):</span><br><span class="line">            result.extend(process_tags(item))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Step-3-Rethink-your-logic"><a href="#Step-3-Rethink-your-logic" class="headerlink" title="Step 3: Rethink your logic"></a>Step 3: Rethink your logic</h3><p>Sometimes, a simple change in your approach can reduce nesting. For example, try using maps, filters, or reducers instead of nested loops.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_item</span>(<span class="params">item, threshold</span>):</span><br><span class="line">    <span class="keyword">return</span> item[<span class="string">&quot;value&quot;</span>] &gt; threshold <span class="keyword">and</span> item[<span class="string">&quot;category&quot;</span>] <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">important_tags</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="keyword">return</span> [(item[<span class="string">&quot;id&quot;</span>], tag) <span class="keyword">for</span> tag <span class="keyword">in</span> item[<span class="string">&quot;tags&quot;</span>] <span class="keyword">if</span> tag.startswith(<span class="string">&quot;important&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">data, threshold</span>):</span><br><span class="line">    <span class="keyword">return</span> [tag <span class="keyword">for</span> item <span class="keyword">in</span> data <span class="keyword">if</span> filter_item(item, threshold) <span class="keyword">for</span> tag <span class="keyword">in</span> important_tags(item)]</span><br></pre></td></tr></table></figure><p>In the final refactored code, we’ve flattened the nesting using early returns, broken it down into smaller functions, and rethought the logic using list comprehensions. The code is now more readable, maintainable, and easier to test.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I believe that the downsides of overly nested code are well known and covered, it mainly revolves around readability and maintainability,</summary>
      
    
    
    
    <category term="software practices" scheme="https://eliran-turgeman.github.io/categories/software-practices/"/>
    
    
    <category term="best practices" scheme="https://eliran-turgeman.github.io/tags/best-practices/"/>
    
    <category term="software engineering" scheme="https://eliran-turgeman.github.io/tags/software-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Testing practices I follow</title>
    <link href="https://eliran-turgeman.github.io/2023/01/16/testing-practices-I-follow/"/>
    <id>https://eliran-turgeman.github.io/2023/01/16/testing-practices-I-follow/</id>
    <published>2023-01-16T06:44:39.000Z</published>
    <updated>2023-02-23T19:56:30.508Z</updated>
    
    <content type="html"><![CDATA[<p>Testing doesn’t need much of an introduction. Yeah, it’s important; Yeah you probably write&#x2F;refactor tests every day.  </p><p>Although testing itself is pretty obvious, there are many pitfalls to actually writing good tests.  </p><p>In this post, I’ll share my practices for writing tests and talk about when I write tests.  </p><p><em>Disclaimer</em>: This is not groundbreaking advice, if you’re an experienced software engineer the following might be obvious to you, but I’d still love to hear your feedback so keep on reading.</p><p><em>2nd Disclaimer</em>: Most examples would fit the definition of a unit test, but you can apply the practices shown to other types of tests.</p><h1 id="Writing-tests"><a href="#Writing-tests" class="headerlink" title="Writing tests"></a>Writing tests</h1><p>In this section I will walk you through the practices I follow when writing tests.<br>It will include test structure, the details I assert for, and ensuring test isolation.</p><h2 id="Structure-equals-clarity"><a href="#Structure-equals-clarity" class="headerlink" title="Structure equals clarity"></a>Structure equals clarity</h2><p>In general, the practice I follow here is separating the test into 3 parts.  </p><ul><li>Preparing all required information that the function I am about to test needs (preparing arguments, mocks, etc..)</li><li>Calling the function</li><li>Asserting the expected result</li></ul><p>This pattern is known as Arrange, Act, Assert.  </p><hr><p>Let’s go over a quick example. We have a pizza class with a <code>make</code> function that is making a pizza if the requested size and shape are valid.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PIZZA_SUPPORTED_SHAPES = (<span class="string">&#x27;circle&#x27;</span>, <span class="string">&#x27;square&#x27;</span>)</span><br><span class="line">PIZZA_SUPPORTED_SIZES = (<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;xl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakePizzaResult</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    INVALID_SHAPE = <span class="string">&#x27;INVALID_SHAPE&#x27;</span></span><br><span class="line">    INVALID_SIZE = <span class="string">&#x27;INVALID_SIZE&#x27;</span></span><br><span class="line">    SUCCESS = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shape: <span class="built_in">str</span>, size: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.shape = shape.lower()</span><br><span class="line">        self.size = size.lower()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make</span>(<span class="params">self</span>) -&gt; MakePizzaResult:</span><br><span class="line">        <span class="keyword">if</span> self.shape <span class="keyword">not</span> <span class="keyword">in</span> PIZZA_SUPPORTED_SHAPES:</span><br><span class="line">            <span class="keyword">return</span> MakePizzaResult.INVALID_SHAPE</span><br><span class="line">        <span class="keyword">elif</span> self.size <span class="keyword">not</span> <span class="keyword">in</span> PIZZA_SUPPORTED_SIZES:</span><br><span class="line">            <span class="keyword">return</span> MakePizzaResult.INVALID_SIZE</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Pizza is made, woohoo!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> MakePizzaResult.SUCCESS</span><br></pre></td></tr></table></figure><p>Following the pattern Arrange, Act, Assert, I would write the following test for <code>Pizza.make</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_make_pizza</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Arrange</span></span><br><span class="line">    shape = <span class="string">&#x27;XL&#x27;</span></span><br><span class="line">    size = <span class="string">&#x27;circle&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Act</span></span><br><span class="line">    result = Pizza(shape, size).make()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assert</span></span><br><span class="line">    <span class="keyword">assert</span> result == MakePizzaResult.SUCCESS</span><br></pre></td></tr></table></figure><p>That sums up tests structure, now let’s discuss tests isolation.</p><h2 id="Test-isolation"><a href="#Test-isolation" class="headerlink" title="Test isolation"></a>Test isolation</h2><p>Every test should be isolated.<br>If your tests are not isolated you can encounter the following scenarios:</p><ul><li>You ran a single test - it passes, but when you run all the tests together - the same test fails</li><li>Order of the tests changed the results - Test A only passes if it runs after test B</li></ul><p>This can happen for multiple reasons, for example, you set an environment variable in one test which affects the behavior of other tests, or you don’t restore&#x2F;clear your mocks which affects other tests.</p><p>Let’s get back to the pizza example, now you want to create a new functionality that will upgrade the pizza size.<br>Until you are confident enough to release it, you put this “feature” under a “feature-flag”-like environment variable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.getenv(<span class="string">&#x27;PIZZA_UPGRADE_FEATURE_FF&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.size = <span class="string">&#x27;xl&#x27;</span></span><br></pre></td></tr></table></figure><p>Now writing tests for it</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_upgrade_pizza_success</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Arrange</span></span><br><span class="line">    os.environ[<span class="string">&#x27;PIZZA_UPGRADE_FEATURE_FF&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    shape = <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">    size = <span class="string">&#x27;l&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Act</span></span><br><span class="line">    pizza = Pizza(shape, size)</span><br><span class="line">    pizza.upgrade()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assert</span></span><br><span class="line">    <span class="keyword">assert</span> pizza.size == <span class="string">&#x27;xl&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_upgrade_pizza_failed</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Arrange</span></span><br><span class="line">    shape = <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">    size = <span class="string">&#x27;l&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Act</span></span><br><span class="line">    pizza = Pizza(shape, size)</span><br><span class="line">    pizza.upgrade()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assert</span></span><br><span class="line">    <span class="keyword">assert</span> pizza.size == <span class="string">&#x27;l&#x27;</span></span><br></pre></td></tr></table></figure><p>You might expect both of these tests to pass, but the second test won’t.<br>The environment variable we set in the first test will still be there when the second test executes - which means that the second test will also get an upgraded pizza!</p><p>Also, switching the order of the tests will result in both succeeding, exactly the thing we want to avoid.</p><p><strong>How do we fix it?</strong> clear the general state (remove the environment variable we set at the end of the test) or even better, use tooling in order to mock the environment variables per test.</p><p>By changing the first test as follows, we will eliminate the isolation issue we had and both tests should pass regardless of their execution order.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@mock.patch(<span class="params">os.environ, &#123;<span class="string">&#x27;PIZZA_UPGRADE_FEATURE_FF&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_upgrade_pizza_success</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Arrange</span></span><br><span class="line">    shape = <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">    size = <span class="string">&#x27;l&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Act</span></span><br><span class="line">    pizza = Pizza(shape, size)</span><br><span class="line">    pizza.upgrade()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assert</span></span><br><span class="line">    <span class="keyword">assert</span> pizza.size == <span class="string">&#x27;xl&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="The-devil-is-in-the-details"><a href="#The-devil-is-in-the-details" class="headerlink" title="The devil is in the details"></a>The devil is in the details</h2><p>TLDR: Pick your assertions wisely.</p><p>There is an issue with overspecifying the assertions, and that is the tests can become flaky.</p><p>Tests can be written in a way that causes them to fail even if small changes are made, like changing the wording or capitalization. Instead of checking for specific things, the tests compare entire strings or documents, which can change for good reasons.</p><p>These kinds of tests are hard to maintain, and fail often - you’ll save yourself a lot of time by investing a bit more thought about the things you assert for.</p><p>For example, asserting a result equals an entire JSON, instead of breaking down the assertions into smaller pieces of the things that actually matter for the test (like the length of the result, specific structure, etc…)</p><h1 id="When-I-write-tests"><a href="#When-I-write-tests" class="headerlink" title="When I write tests"></a>When I write tests</h1><p>I’d love to tell you I follow TDD, but I am not quite there yet, I have somewhat of a hybrid approach.</p><p>Basically, when fixing bugs, I think the best way to actually solve it with good certainty is:</p><ul><li>Find the bug</li><li>Write a failing test that reproduces the bug</li><li>Fix the bug</li><li>Verify your new test passes</li></ul><p>This is undoubtedly an important technique for fixing bugs you should leverage if you don’t already.</p><p>When writing features, I don’t always write the tests first. Implementation details might vary while writing the feature, and re-writing the tests isn’t so appealing.</p><p>Although I don’t necessarily write the tests beforehand, I always think about how easily I could write them once I am done. I ask myself the following, and adjust the method implementation based on my answers:</p><ul><li>Is this method modular enough to test each unit alone?</li><li>What should be mocked? can I mock them easily?</li><li>How is this method going to affect depending method’s tests? can I minimize unnecessary change?</li></ul><hr><p>This post doesn’t have a summary, since the writer <del>thought it was useless</del> was lazy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Testing doesn’t need much of an introduction. Yeah, it’s important; Yeah you probably write&amp;#x2F;refactor tests every day.  &lt;/p&gt;
&lt;p&gt;Altho</summary>
      
    
    
    
    <category term="software practices" scheme="https://eliran-turgeman.github.io/categories/software-practices/"/>
    
    
    <category term="software" scheme="https://eliran-turgeman.github.io/tags/software/"/>
    
    <category term="testing" scheme="https://eliran-turgeman.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Logging practices I follow</title>
    <link href="https://eliran-turgeman.github.io/2023/01/06/logging-practices-I-follow/"/>
    <id>https://eliran-turgeman.github.io/2023/01/06/logging-practices-I-follow/</id>
    <published>2023-01-06T15:36:04.000Z</published>
    <updated>2023-02-23T19:56:30.507Z</updated>
    
    <content type="html"><![CDATA[<p>No matter what kind of software you’re developing, you most definitely leverage logging to some extent, probably every single day.<br>You write a lot of logs, you read tons of them too, it is the most basic observability tool we have.  </p><h1 id="Not-all-logs-are-equal-x2F-Should-you-even-log-it"><a href="#Not-all-logs-are-equal-x2F-Should-you-even-log-it" class="headerlink" title="Not all logs are equal &#x2F; Should you even log it?"></a>Not all logs are equal &#x2F; Should you even log it?</h1><p>There are many pitfall that can lead to useless, wasteful and confusing logs. Therefore I follow a specific set of practices which allows me to write better logs while also being consistent across the system.<br>You should remmember that logging is for the developers, you are going to be the only one who’s reading them, so as you are about to log something, ask yourself this:</p><ul><li>Is this log really needed? does it rely important information I couldn’t get from the other logs in the same flow? </li><li>Am I going to log an object that can be huge on production? If so, can I just log a few metrics of that objects instead? for example, it’s length, or handpick a few important attribute to log.</li><li>Does the information I am about to log will help me to debug&#x2F;understand the flow?</li></ul><p>These questions should guide you to decide whether you should log something or not, but it’s not the whole story.<br>Given that you decided you should, now you should ask yourself “how?”.  </p><h1 id="How-to-log-it"><a href="#How-to-log-it" class="headerlink" title="How to log it?"></a>How to log it?</h1><p>As a first, and surprisingly not-so-obvious, rule of thumb I’d say you should keep your logs consistent across the system.<br>Consistency leads to predictability which leads to you looking for logs without always having to look how they are defined.<br>For example, If you always start your log with a prefix <code>&quot;[serviceName](functionName)...&quot;</code>, when you are looking for a function log, you don’t have to open up the source code and check out the log message, but maybe I am portraying a bit of utopian world. In any case, consistency is awesome, so keep it.  </p><p>Although consistency is awesome, it doesn’t cut it alone, as your logs can be consistenly trash, so here are a handful of practices I follow when logging.</p><h2 id="Log-levels"><a href="#Log-levels" class="headerlink" title="Log levels"></a>Log levels</h2><p>Whenever you write a log, it’s important you choose the correct log level.<br>I personally mostly use ERROR, WARNING, INFO, or DEBUG (yes there are a few more).</p><h3 id="Log-levels-TLDR"><a href="#Log-levels-TLDR" class="headerlink" title="Log levels TLDR"></a>Log levels TLDR</h3><ul><li>ERROR: Parts of the flow failed, we want to send alerts to our on-call for this failures.</li><li>WARNING: Doesn’t necessarily point to a failure, but an unexpected behavior that should be investigated.</li><li>INFO: Record major events in the flow to help the developer reading it understand what was being executed.</li><li>DEBUG: Like INFO but more detailed, including inspection into objects, data structures, etc.</li></ul><p>The most common pitfalls I see here are logging too detailed info logs, or not using DEBUG at all.</p><h2 id="Log-frugality"><a href="#Log-frugality" class="headerlink" title="Log frugality"></a>Log frugality</h2><p>Whatever service you are using for logging, it costs money, and a fast way to burn money is to log the entire json object that was relatively small on your dev env, but blew up on production.</p><p>Huge object logs are not helpful, it’s hard to read through them.<br>Huge object logs are there because it is easier to throw in everything instead of thinking what would be the most important&#x2F;useful attributes to log.<br>Huge object logs will cost you a lot of money, depending on your scale.  </p><p>Let’s take AWS CloudWatch service for example, currently the price for log ingestion is $0.5 per GB. You log that giant json for all your 1000 customers each time the flow is invoked, you are already paying for that json log alone a few thousands a month. </p><h3 id="What-you-should-do-instead"><a href="#What-you-should-do-instead" class="headerlink" title="What you should do instead?"></a>What you should do instead?</h3><ul><li>Pick the attributes that are the most important and useful to log, the attributes that will actually help you debug the continuation of the flow.</li><li>Sometimes, you just need to know if the object is empty or not, just log that - not the entire object.</li></ul><h2 id="Log-uniqueness"><a href="#Log-uniqueness" class="headerlink" title="Log uniqueness"></a>Log uniqueness</h2><p>Each log message in the system should be unique.<br>If I query for a log in a specfic service, I will be confused to see the exact same logs at different flows inside the service.<br>More than that, I’ll just have to start debugging for the issue, since the logs are now offically useless.  </p><p>One way to keep the logs unique is to denote the service name and function name as a prefix for the log, if you do that - you are guarenteed uniqueness or at the very least, you narrowed the scope of log duplication from the entire service to just a function. </p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Logging is important, it is a crucial tool for any kind of software, use it to your advantage, and don’t litter it.  </p><p>Keep in mind that logging is for you, you will be reading them whenever you need to debug why the function you wrote failed. Save yourself future trouble, and invest in thoughtful logging in advance.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;No matter what kind of software you’re developing, you most definitely leverage logging to some extent, probably every single day.&lt;br&gt;You</summary>
      
    
    
    
    <category term="software practices" scheme="https://eliran-turgeman.github.io/categories/software-practices/"/>
    
    
    <category term="logging" scheme="https://eliran-turgeman.github.io/tags/logging/"/>
    
    <category term="software" scheme="https://eliran-turgeman.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Cohesion in simple terms - Software modularity</title>
    <link href="https://eliran-turgeman.github.io/2022/12/24/cohesion/"/>
    <id>https://eliran-turgeman.github.io/2022/12/24/cohesion/</id>
    <published>2022-12-24T08:17:18.000Z</published>
    <updated>2023-02-23T19:56:30.506Z</updated>
    
    <content type="html"><![CDATA[<p>Modularity is a must for good software design. It helps with extensibility, readability, maintainability, and more. It certainly isn’t easy to make your code modular, but what exactly is modularity, and how do we measure it?</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Modularity describes a logical grouping of related code, which could be a group of classes or functions. [1]</p><p>Modularity measures how well your code is separated into different modules or chunks of functionality. The more modular your code is, the easier it will be to change. Making your code modular isn’t an end, but a means to an end: you want to make it easier for others (including yourself) to understand what your code does and how it works.</p><h2 id="How-do-we-measure-modularity"><a href="#How-do-we-measure-modularity" class="headerlink" title="How do we measure modularity?"></a>How do we measure modularity?</h2><p>There are more than a few useful metrics to measure modularity.<br>In this series, I’ll do my best to help you understand cohesion, coupling, and connascence.</p><p>This part will focus on cohesion, let’s go.</p><h2 id="Cohesion"><a href="#Cohesion" class="headerlink" title="Cohesion"></a>Cohesion</h2><p>In the book Fundamentals of Software Architecture, Mark Richards and Neal Ford define what is a cohesive module.</p><p>A cohesive module is one where all the parts should be packaged together, because breaking them into smaller pieces would require coupling the parts together via calls between modules to acheive useful results. [1]</p><p>Let’s start with a simple class example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    self.b = <span class="number">2</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_a</span>(<span class="params">self</span>):</span><br><span class="line">    func(self.a)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_b</span>(<span class="params">self</span>):</span><br><span class="line">    func(self.b)</span><br></pre></td></tr></table></figure><p>The above class is not cohesive. Why?<br>Since its functionality can be broken into two separate classes without affecting the results.</p><p>In order to make this class cohesive, we can split it into two classes that don’t contain variables that are excessive to some methods (variable a is excessive to method do_b, and variable b is excessive to method do_a).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_a</span>(<span class="params">self</span>):</span><br><span class="line">    func(self.a)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self</span>):</span><br><span class="line">    self.b = <span class="number">2</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_b</span>(<span class="params">self</span>):</span><br><span class="line">    func(self.b)</span><br></pre></td></tr></table></figure><p>Building on top of this example, we can illustrate this in a graph.<br>Consider a class, all of its methods and variables will be vertices.</p><p>There’s an edge between the method vertex, M1, and the variable vertex, V1 if M1 uses V1.</p><p>For example, consider this scenario where we have 5 methods and 5 variables in a single class.</p><p>Method 1 uses only variable 1<br>Method 2 uses both variable 2 and variable 5<br>Method 3 uses only variable 3<br>Method 4 uses only variable 4<br>Method 5 uses only variable 5  </p><p>From the above scenario, we can generate the following graph</p><p><img src="/../cohesion-images/non-cohesive.png"></p><p>We can deem this class non-cohesive because most methods can be split up into different classes as we did with the first code example. (for example, Method 1 doesn’t use variables 2–5 so there’s no benefit to keeping them under the same class)</p><p>In contrast, a cohesive class would have a graph with far more edges, for example</p><p><img src="/../cohesion-images/cohesive.png"></p><p>More edges mean that each method uses more variables and splitting up is harder&#x2F;less efficient&#x2F;impossible.</p><h2 id="How-do-we-measure-cohesion"><a href="#How-do-we-measure-cohesion" class="headerlink" title="How do we measure cohesion?"></a>How do we measure cohesion?</h2><p>Now that we have a rough idea of what cohesion means, let’s formalize how we measure it.</p><p>Given n methods M1, M2, …, Mn contained in a class C1 which also contains a set of instance variables { Ai }. Then for any method Mi we can define the partitioned set of</p><p>P &#x3D; {(Ai, Aj) | Ai ∩ Aj &#x3D; φ}<br>Q &#x3D; {(Ai, Aj) | Ai ∩ Aj ≠ φ}</p><p>then <strong>LCOM</strong> &#x3D; |P| — |Q|, if |P| &gt; |Q|</p><p>&#x3D;0 otherwise</p><p>LCOM is a count of the number of method pairs whose similarity is zero. [2]</p><p>Let’s break this definition down with both of the graph examples.</p><p>first example:<br>A1 &#x3D; { V1 }<br>A2 &#x3D; { V2, V5 }<br>A3 &#x3D; { V3 }<br>A4 &#x3D; { V4 }<br>A5 &#x3D; { V5 }  </p><p>A5 ∩ A2 &#x3D; { V2}<br>And all other intersection results in empty sets, meaning that:<br>|P| &#x3D; 9, |Q| &#x3D; 1<br>LCOM &#x3D; 8</p><p>second example:<br>A1 &#x3D; { V1, V3, V4 }<br>A2 &#x3D; { V2, V5 }<br>A3 &#x3D; { V2, V3 }<br>A4 &#x3D; { V4, V5 }<br>A5 &#x3D; { V1, V5 }  </p><p>|P| &#x3D; 3, |Q| &#x3D; 7<br>LCOM &#x3D; 0</p><p>LCOM &#x3D; 0 indicates a cohesive class.</p><p>LCOM &gt; 0 indicates that the class needs or can be split into two or more classes, since its variables belong in disjoint sets. [2]</p><p>From the above example, we can understand that the cohesiveness of a class&#x2F;module is a gradient, and not necessarily a yes&#x2F;no question.</p><p>Mostly, in order to effectively use this metric, you set a threshold for cohesiveness — for example, if LCOM &gt; 20 we regard the class as non-cohesive, otherwise the class is cohesive.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] Fundamentals of Software Architecture, by Mark Richards, Neal Ford</p><p>[2] Chidamber, S., R., Kemerer, C., K., A Metrics Suite for Object Oriented Design, IEEE Trans. on Software Eng., Vol.20, №6, June 1994.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Modularity is a must for good software design. It helps with extensibility, readability, maintainability, and more. It certainly isn’t ea</summary>
      
    
    
    
    <category term="software design" scheme="https://eliran-turgeman.github.io/categories/software-design/"/>
    
    
    <category term="modularity" scheme="https://eliran-turgeman.github.io/tags/modularity/"/>
    
    <category term="software design" scheme="https://eliran-turgeman.github.io/tags/software-design/"/>
    
  </entry>
  
  <entry>
    <title>Linux Scheduling</title>
    <link href="https://eliran-turgeman.github.io/2022/09/25/linux-scheduling/"/>
    <id>https://eliran-turgeman.github.io/2022/09/25/linux-scheduling/</id>
    <published>2022-09-25T05:26:13.000Z</published>
    <updated>2023-02-23T19:56:30.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Process-Scheduling-In-Linux"><a href="#Process-Scheduling-In-Linux" class="headerlink" title="Process Scheduling In Linux"></a>Process Scheduling In Linux</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><strong>Scheduling</strong> is the action of assigning <em>resources</em> to perform _tasks.<br>We will mainly focus on scheduling where our <em>resource</em> is a processor or multiple processors, and the <em>task</em> will be a thread or a process that needs to be executed.</p><p>The act of scheduling is carried out by a process called **scheduler.<br>**The scheduler goals are to</p><ul><li>Maximize <em>throughput</em> (amount of tasks done per time unit)</li><li>Minimize <em>wait time</em> (amount of time passed since the process was ready until it started to execute)</li><li>Minimize <em>response time</em> (amount of time passed since the process was ready until it finished executing)</li><li>Maximize <em>fairness</em> (distributing resources fairly for each task)</li></ul><p>Before getting to the how process scheduling works in Linux, let’s review simpler scheduling algorithms and examples.</p><h2 id="Scheduling-101"><a href="#Scheduling-101" class="headerlink" title="Scheduling 101"></a>Scheduling 101</h2><p>In case you are familiar with scheduling in general, and don’t need another review of it, go ahead and skip to the next section.</p><p>There are two main types of schedulers — Preemptive and non-preemptive schedulers.<br>If a scheduler is preemptive it might decide at some point that process A had enough CPU for now and decides to hand it to another process.<br>A non-preemptive scheduler doesn’t support this behavior and CPU is yielded when a process terminates or the process is waiting for some I&#x2F;O operation and in the meantime is sleeping.</p><div style="page-break-after: always;"></div><h3 id="How-do-we-measure-schedulers"><a href="#How-do-we-measure-schedulers" class="headerlink" title="How do we measure schedulers?"></a>How do we measure schedulers?</h3><p>There are a few main metrics we will focus on, but before we do, let’s try to give an illustration of what a scheduler might look like</p><p><img src="https://user-images.githubusercontent.com/50831652/192136555-5438059b-c666-4852-a82f-3c33b358fead.png" alt="1_KMZ5-T0g41hVNq7yhWLs_w (1)"></p><p>In the above illustration, you can see that our machine has 3 cores.<br>The numbers indicate the order of arrival.<br>The first job came and demanded 1 core for 3-time units, then the second one came and demanded 2 cores for 5-time units, and so on.</p><h4 id="Utilization"><a href="#Utilization" class="headerlink" title="Utilization"></a>Utilization</h4><p>Utilization is defined by the percentage of time that our CPU is busy.<br>In the case above we have 18 available blocks but only 16 of them are being used, meaning that the utilization here is 0.888 (88.8%).</p><h4 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h4><p>Throughput is defined by how much work is done per time unit.<br>In our case, 3 processes finish their execution in 6-time units meaning that our throughput is 0.5.</p><h4 id="Wait-Time"><a href="#Wait-Time" class="headerlink" title="Wait Time"></a>Wait Time</h4><p>Wait time is defined by the difference between the time the job was submitted and the time it actually started to run.<br>In our case, job 3 could hypothetically be submitted in time unit 2 but at this point, jobs 1 and 2 took all the resources which made job 3 waits until it had enough resources to start running.</p><h4 id="Response-Time"><a href="#Response-Time" class="headerlink" title="Response Time"></a>Response Time</h4><p>Response time is defined by the difference between the time the job was submitted and the termination time.<br>Assuming job 3 was submitted in time unit 2 and terminated in time unit 6 it means the response time of this job is 4.</p><div style="page-break-after: always;"></div><h3 id="Scheduling-Algorithms-Examples"><a href="#Scheduling-Algorithms-Examples" class="headerlink" title="Scheduling Algorithms Examples"></a>Scheduling Algorithms Examples</h3><h4 id="FCFS-First-Come-First-Served"><a href="#FCFS-First-Come-First-Served" class="headerlink" title="FCFS - First-Come First-Served"></a>FCFS - First-Come First-Served</h4><p>The name is pretty self-explanatory — Jobs are scheduled by their arrival time.<br>If there are enough free cores, an arriving job will start to run immediately.<br>Otherwise, it waits until enough cores are freed.</p><p><img src="https://user-images.githubusercontent.com/50831652/192136574-a32b9ffa-3801-455d-a9f6-508a5e886288.png" alt="1_L1TPrOpfTFMNTPA_C58ZiA (2)"></p><p>The above diagram illustrates shows how FCFS would work, and we can immediately see that we can optimize it.<br>As we see, job 4 only requires two cores for a single time unit and it can be scheduled on the unutilized cores.</p><p>Pros:</p><ul><li>Easy to implement — FIFO wait queue</li><li>Perceived as most fair</li></ul><p>Cons:</p><ul><li>Creates fragmentation — the unutilized cores</li><li>Small or short jobs might wait for a long time</li></ul><h4 id="FCSFS-With-Backfilling"><a href="#FCSFS-With-Backfilling" class="headerlink" title="FCSFS With Backfilling"></a>FCSFS With Backfilling</h4><p>This variation of FCFS reduces the number of unutilized cores.<br>Whenever a job arrives or terminates, we try to start the head of the wait queue — as we did in the original FCFS.<br>Then, iterate over the waiting jobs and try to backfill them.</p><p>Backfilling happens when a short waiting job can “jump over” the head of the wait queue without delaying its start time.</p><p><img src="https://user-images.githubusercontent.com/50831652/192136582-4b41cf81-b6d3-4fb5-8488-7d1ae4974d65.png" alt="1_9ssIkIVY3HEzn3CgEvzN2g (2)"></p><p>As you can see, job 3 wasn’t delayed but we could make job 4 jumps over it and execute while job 3 waits for enough resources.</p><p>Pros:</p><ul><li>Less fragmentation — better utilization</li></ul><p>Cons:</p><ul><li>Must know runtimes in advance in order the calculate the size of the “holes” and to know which candidates can be backfilled.</li></ul><h4 id="SJF-Shortest-Job-First"><a href="#SJF-Shortest-Job-First" class="headerlink" title="SJF - Shortest-Job First"></a>SJF - Shortest-Job First</h4><p>Unlike FCFS, instead of ordering jobs by their arrival time, we order time by their estimated runtime.<br>This algorithm is optimal in the metric of average wait time, let’s try to get some intuition why.</p><p>Let’s assume that performing FCFS led us to this point</p><p><img src="https://user-images.githubusercontent.com/50831652/192136590-ac1d5301-7542-4107-bd4e-7b5a40754d0e.png" alt="1_doWDqDwLuxi-mrnXOw6iAg (1)"></p><p>Let’s try to think how it would be different with SJF and compute the respective average wait time.</p><p><img src="https://user-images.githubusercontent.com/50831652/192136591-ab4ae1a2-f7f3-4486-9def-e70294c8e2e0.png" alt="1_tCCjz7cKS_PFBDhw6QEDSQ (1)"></p><p>Regarding the FCFS scheduler (first illustration):</p><ul><li>job 1 waits 0 time units</li><li>job 2 waits 3 time units</li><li>job 3 waits 4 time units</li></ul><p>Hence, the average wait time is (0+3+4)&#x2F;3 &#x3D; 7&#x2F;3</p><p>Let’s do the same for the SJF scheduler (second illustration):</p><ul><li>job 1 waits 2 time units</li><li>job 2 waits 0 time units</li><li>job 3 waits 1 time unit</li></ul><p>The average wait time, in this case, is (2+0+1)&#x2F;3 &#x3D; 1</p><div style="page-break-after: always;"></div><h2 id="Process-Scheduling-In-Linux-1"><a href="#Process-Scheduling-In-Linux-1" class="headerlink" title="Process Scheduling In Linux"></a>Process Scheduling In Linux</h2><p>Linux has two types of processes</p><ul><li>Real-time Processes</li><li>Conventional Processes</li></ul><p><strong>Real-time processes</strong> are required to ‘obey’ response time constraints without any regard to the system’s load.<br>In different words, real-time processes are <strong>urgent and cannot be delayed</strong> no matter the circumstances.</p><p>An example of a real-time process in Linux is the migration process which is responsible for distributing processes across CPU cores (a.k.a load balancing).</p><p><strong>Conventional processes</strong> don’t have strict response time constraints and they can suffer from delays in case the system is ‘busy’.</p><p>An example of a conventional process can be the browser process you’re using to read this post.</p><p>Each process type has a different scheduling algorithm, and as long as there are ready-to-run real-time processes they will run and make the conventional processes wait.</p><p><img src="https://user-images.githubusercontent.com/50831652/192136602-e6d90985-dd78-48d1-8b61-2afc75e6481c.png" alt="1_wWMZMxH6lPKfjZ1L07TBjQ (1)"></p><div style="page-break-after: always;"></div><h4 id="Real-Time-Scheduling"><a href="#Real-Time-Scheduling" class="headerlink" title="Real-Time Scheduling"></a>Real-Time Scheduling</h4><p>There are two scheduling policies when it comes to real-time scheduling, SCHED_RR and SCHED_FIFO.</p><p>The policy affects how much runtime a process will get and how is the <strong>runqueue</strong> is operating.</p><p>Since I didn’t mention it explicitly before, let’s get something in order.<br>The ready-to-run processes I have mentioned are stored in a queue called runqueue. The scheduler is picking processes to run from this runqueue based on the policy.</p><h5 id="SCHED-FIFO"><a href="#SCHED-FIFO" class="headerlink" title="SCHED_FIFO"></a>SCHED_FIFO</h5><p>As you might have guessed, in this policy the scheduler will choose a process based on the arrival time (FIFO &#x3D; First In First Out).</p><p>A process with a scheduling policy of SCHED_FIFO can ‘give up’ the CPU under a few circumstances:</p><ul><li>Process is waiting, for example for an IO operation.<br>When the process is back to ‘ready’ state it will go back to the end of the runqueue.</li><li>Process yielded the CPU, with the system call _sched_yield.<br>_The process will immediately go back to the end of the runqueue.</li></ul><h5 id="SCHED-RR"><a href="#SCHED-RR" class="headerlink" title="SCHED_RR"></a>SCHED_RR</h5><p>RR &#x3D; Round Robin<br>In this scheduling policy, every process in the runqueue gets a time slice (quantum) and executes in his turn (based on priority) in a cyclic fashion.</p><p>In order for us to have a better intuition about round robin, let’s consider an example where we have 3 processes in our runqueue, A B C, all of them have the policy of SCHED_RR.<br>As shown in the drawing below, each process gets a time slice and executes in his turn. when all processes ran 1 time, they repeat the same execution order.</p><p><img src="https://user-images.githubusercontent.com/50831652/192136610-96aff4c8-9310-4ad1-a3e8-94858941b78e.png" alt="1_45XO_ysE6pOLZaP31FyrVQ (1)"></p><h4 id="Conventional-Scheduling"><a href="#Conventional-Scheduling" class="headerlink" title="Conventional Scheduling"></a>Conventional Scheduling</h4><p>CFS — Completely Fair Scheduler is the scheduling algorithm of conventional processes since version 2.6.23 of Linux.</p><p>Remember the metrics of schedulers we discussed at the top of this article? so CFS is focusing mainly on one metric — it wants to be fair as much as possible, meaning that he gives every process gets an even time slice of the CPU.<br><strong>Note that</strong>, processes with higher priority might still get bigger time slices.</p><p>In order for us to understand how CFS works, we will have to get familiar with a new term — virtual runtime (vruntime).</p><h5 id="Virtual-Runtime"><a href="#Virtual-Runtime" class="headerlink" title="Virtual Runtime"></a>Virtual Runtime</h5><p>Virtual runtime of a process is the amount of time spent by actually executing, not including any form of waiting.</p><p>As we mentioned, CFS tries to be as fair as possible.<br>To accomplish that, CFS will schedule the process with the minimum virtual time that is ready to run.</p><p>CFS maintains variables holding the maximum and minimum virtual runtime for reasons we will understand soon.</p><div style="page-break-after: always;"></div><h4 id="CFS-—-Completely-Fair-Scheduler"><a href="#CFS-—-Completely-Fair-Scheduler" class="headerlink" title="CFS — Completely Fair Scheduler"></a>CFS — Completely Fair Scheduler</h4><p>Before talking about how the algorithm works, let’s understand what data structure this algorithm is using.</p><p>CFS uses a red-black tree which is a balanced binary search tree — meaning that insertion, deletion, and look-up are performed in O(logN) where N is the number of processes.</p><p>The key in this tree is the <strong>virtual runtime</strong> of a process.</p><p>New processes or process that got back to the ready state from waiting are inserted into the tree with a key vruntime&#x3D;min_vruntime.<br>This is extremely important in order to prevent starvation of older processes in the tree.</p><p>Moving on to the algorithm, at first, the algorithm sets itself a time limit — sched_latency.<br>In this time limit, it will try to execute all ready processes — N.<br>This means that each process will get a time slice of the time limit divided by the number of processes — Qᵢ &#x3D; sched_latency&#x2F;N.</p><p>When a process finishes its time-slice (Qᵢ), the algorithm picks the process with the least virtual runtime in the tree to execute next.</p><p>Let’s address a situation that might be problematic with the way I described the algorithm so far.<br>Assuming that the algorithm picked a time limit of 48ms(milliseconds) and we have 6 processes — in this case, every process gets 8ms to execute in his turn.</p><p>But what happens when the system is overloaded with processes?<br>Let’s say the time limit remains 48ms but now we have 32 processes, now each process has 1.5ms to execute — and this will cause a major slowdown in our system.</p><p><strong>Why? What’s the difference?</strong></p><p>Context switches.<br>A context switch is a process of storing the state of a process or thread so that it can be restored and resume execution at a later point.</p><p>Every time that a process finishes its execution time and a new process is scheduled, a context switch occurs which also takes time.</p><p>Let’s say that a context switch costs us 1ms, in the first example where we have 6ms per process, we can allow that, we waste 1ms on the context switch and 5ms on actually executing the process. but in the second example, we only have 0.5ms to execute the process — we waste most of our time slice for context switching and that’s why it simply cannot work.</p><p>In order to overcome this situation, we introduce a new variable that will determine how small a time slice is allowed to be — min_granularity.</p><p>Let’s say that min_granularity&#x3D;6ms and get back to our example.<br>Our time limit is 48 and we have 32 processes.<br>By the calculation we made before, every process will get 1.5ms but now it is simply not allowed because the min_granularity specifies the minimum time slice each process should get.</p><p>In this case, where Qᵢ &lt; min_granularity we take min_granularity as our Qᵢ and change the time limit according to it.</p><p>In our example, Qᵢ would be equal to 6ms since 1.5ms &lt; 6ms and that would mean that the new time limit would be Qᵢ ⋅ N &#x3D; 6ms ⋅ 32 &#x3D; 192ms.</p><hr><p>To Summarize, the differences between RR and CFS are as follows</p><p><img src="https://user-images.githubusercontent.com/50831652/192136627-c4d10128-e50f-4ca9-9197-97fe3b2274bf.jpeg" alt="1_a7Ucr9-JgFzaU0VxzOctwA (1)"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Process-Scheduling-In-Linux&quot;&gt;&lt;a href=&quot;#Process-Scheduling-In-Linux&quot; class=&quot;headerlink&quot; title=&quot;Process Scheduling In Linux&quot;&gt;&lt;/a&gt;Proce</summary>
      
    
    
    
    <category term="Operating Systems" scheme="https://eliran-turgeman.github.io/categories/Operating-Systems/"/>
    
    <category term="Algorithms" scheme="https://eliran-turgeman.github.io/categories/Operating-Systems/Algorithms/"/>
    
    
    <category term="OS" scheme="https://eliran-turgeman.github.io/tags/OS/"/>
    
    <category term="Operating Systems" scheme="https://eliran-turgeman.github.io/tags/Operating-Systems/"/>
    
    <category term="Linux" scheme="https://eliran-turgeman.github.io/tags/Linux/"/>
    
    <category term="Scheduling" scheme="https://eliran-turgeman.github.io/tags/Scheduling/"/>
    
  </entry>
  
  <entry>
    <title>Singularity — Microsoft’s Experimental Operating System</title>
    <link href="https://eliran-turgeman.github.io/2022/08/05/singularity-os/"/>
    <id>https://eliran-turgeman.github.io/2022/08/05/singularity-os/</id>
    <published>2022-08-05T05:11:25.000Z</published>
    <updated>2023-02-23T19:56:30.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>What would happen if we will write a new OS from scratch right now? can we do it better? can we improve security and robustness? can we prevent unexpected interactions between applications?</p><blockquote><p>“what would a software platform look like if it was designed from scratch with the primary goal of dependability?” [1]</p></blockquote><p>These are the type of questions that the Microsoft Research team was trying to answer around 18 years ago and it was then when they came up with a pretty cool name for their new OS — Singularity.</p><h1 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h1><p>Singularity was aimed to eliminate some of the shortcomings of existing operating systems such as</p><ul><li>General security vulnerabilities</li><li>Failures due to extensions, drivers, add-ons.</li><li>Unexpected interactions between apps</li><li>Lack of robustness</li></ul><h1 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h1><ul><li>Utilize a safe programming language — no more of C’s shenanigans, we don’t want to “cook” pointers out of integers, no more manually freeing memory and no more buffer overflows.</li><li>Use verification tools — impose constraints that will make verifications easier.</li><li>Improve system architecture and design.</li></ul><h1 id="Singularity-Architecture"><a href="#Singularity-Architecture" class="headerlink" title="Singularity Architecture"></a>Singularity Architecture</h1><p><img src="https://user-images.githubusercontent.com/50831652/183026569-254cd70a-6c14-45f0-9df8-bd19da5c03b7.jpeg" alt="1_1mnFIlzUc5ym71zpONVkJA"></p><p>Singularity provides 3 main abstractions:</p><ul><li>Software-isolated processes (SIPs)</li><li>Contract-based channels</li><li>Manifest-based programs (MBPs)</li></ul><p>Let’s drill down into each of these.</p><h2 id="Software-isolated-processes"><a href="#Software-isolated-processes" class="headerlink" title="Software-isolated processes"></a>Software-isolated processes</h2><p>A SIP is just like an ordinary process — holding the processing resources, context, and a container of threads.</p><p>The quite surprising part is that all SIPs and the kernel are running in the same address space which also means user code runs with full hardware privileges.</p><p>Isn’t it totally counter-intuitive? we just mentioned that we want to improve security as one of our goals and this change seems to make it worse.</p><p>First, let’s think about why would they even make this change - does it improve anything?</p><p>The answer is yes, it improves performance for example.</p><p>Since all SIPs are in the same address space, context switches are performed faster</p><ul><li>No need to switch page tables</li><li>No need to invalidate and repopulate TLBs</li></ul><p>Moreover, system calls are also faster</p><ul><li>We are always in CPL&#x3D;0</li><li>No need to load the kernel stack</li><li>Instead of sending an interrupt, we can just call a function</li></ul><p><img src="https://user-images.githubusercontent.com/50831652/183026863-4d4f7ade-ad00-4ca2-b9d2-99a83fbfa822.jpeg" alt="1_ZULVdo_8NjDhQjr7j0itRQ"></p><p>After we convinced ourselves that with this change performance is better let’s take care of the seeming security problem.</p><p>Each SIP is actually sealed — They can’t be modified from outside.<br>There’s no shared memory between different SIPs, no signals, only explicit IPC.<br>There are also no code modifications from within — no JIT, class loaders, dynamic libraries.</p><p>To ensure that SIPs are actually sealed we employ the following constraints</p><ul><li>A SIP only points to its own data — no pointers to other SIPs</li><li>No pointers into the kernel</li><li>SIP exclusively accesses memory the kernel has given to it</li><li>SIP cannot create new pointers — pointers can be provided from a trusted source such as the kernel.</li></ul><p>With these constraints, although there is a shared address space, there is no sharing of data.</p><h2 id="Contract-based-channels"><a href="#Contract-based-channels" class="headerlink" title="Contract-based channels"></a>Contract-based channels</h2><p>We can think of channels as capabilities.<br>Each SIP can have multiple channels that through them we can create IPC(inter-process communication).<br>For Example, an open file is a channel received from the file server.<br>If a SIP gets this channel it means that it has permission to access it.</p><h2 id="Manifest-based-programs"><a href="#Manifest-based-programs" class="headerlink" title="Manifest-based programs"></a>Manifest-based programs</h2><p>A manifest describes the capabilities, required resources, and dependencies of a SIP.<br>A SIP can’t do anything without a manifest and channels.<br>When installing a manifest we are verifying that it meets all safety requirements, that all of its dependencies are met and it doesn’t create a conflict with a previously installed manifest.<br>For example, a manifest of a driver provides “evidence” to prove that it won’t access the hardware of another driver.</p><hr><p>Microsoft also released the following figure, showcasing Singularity’s performance for raw disk benchmarks compared to other well-known operating systems</p><p><img src="https://user-images.githubusercontent.com/50831652/183029843-8de59f0d-571f-4d78-ac00-523d00c66de0.jpeg" alt="1_5dlq24Glci8FdGeh-DXDwQ (1)"></p><hr><p>Singularity is just one example out of many experimental operating systems.<br>It was last released in November 2008 and since then the project was stopped.</p><p>You can find the source code on <a href="https://github.com/lastweek/source-singularity">Github</a>.</p><p>For further reading, I can recommend the following:</p><ul><li><p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2005/10/tr-2005-135.pdf">Microsoft Overview of the Singularity Project</a></p></li><li><p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/osr2007_rethinkingsoftwarestack.pdf">Rethinking the Software Stack</a></p></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2005/10/tr-2005-135.pdf">Microsoft Overview of the Singularity Project</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;What would happen if we will w</summary>
      
    
    
    
    <category term="Operating Systems" scheme="https://eliran-turgeman.github.io/categories/Operating-Systems/"/>
    
    
    <category term="OS" scheme="https://eliran-turgeman.github.io/tags/OS/"/>
    
    <category term="Singularity" scheme="https://eliran-turgeman.github.io/tags/Singularity/"/>
    
    <category term="Microsoft" scheme="https://eliran-turgeman.github.io/tags/Microsoft/"/>
    
    <category term="Operating System" scheme="https://eliran-turgeman.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Writing My First Open Source Package - Content Aggregation CLI</title>
    <link href="https://eliran-turgeman.github.io/2022/05/07/content-aggregator/"/>
    <id>https://eliran-turgeman.github.io/2022/05/07/content-aggregator/</id>
    <published>2022-05-07T05:58:18.000Z</published>
    <updated>2023-02-23T19:56:30.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>A content aggregator is simply an application that gathers content from across the web in order to allow the user an consolidated way of consuming content.<br>A content aggregator can also save you a lot of time wasted on endless scrolling news feeds and getting distracted from random post on your reddit feed for example.</p><p>Content aggregation helps us optimize our content consumption — instead of scrolling through 5 different websites we only need a single one, and instead of endless scrolling trying to filter the content we care about, we can be presented with content related to our topics of interest immediately.</p><p>In this article, you will learn how to create your own customized content aggregator with python from scratch.</p><h2 id="Brief-Detour"><a href="#Brief-Detour" class="headerlink" title="Brief Detour"></a>Brief Detour</h2><p>When writing this post, I had a minimal code example of a content aggregator that I planned to share with you, but while writing I had a thought of expanding it and eventually I even published it to PyPi as <a href="https://pypi.org/project/Fuse-Con/">my first open source package</a>.</p><p>Ideally, by the end of this post, you’d be able and would want to contribute to <a href="https://github.com/Eliran-Turgeman/Fuse">Fuse</a> yourself.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>A local development environment for Python 3.7+</li><li>Familiarity with Python.</li></ul><h2 id="Step-1-Installing-Dependencies"><a href="#Step-1-Installing-Dependencies" class="headerlink" title="Step 1 - Installing Dependencies"></a>Step 1 - Installing Dependencies</h2><p>In this step, you will install the modules that you will utilize later on. To do so, you will create a file that will hold the requirements for the entire project. </p><p>The packages you are going to install are:</p><ul><li>feedparser - An RSS parsing module</li><li>praw - Python Reddit API Wrapper module</li><li>colorama - Enable colored terminal text</li><li>typing - Adding support for type hints</li></ul><p>Create a new file called <code>requirements.txt</code>.<br>Each line in this file will include the name of the package and the required version to install.<br>Copy the following requirements to your <code>requirements.txt</code> file</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feedparser==6.0.8</span><br><span class="line">praw==6.4.0</span><br><span class="line">colorama==0.4.4</span><br><span class="line">typing==3.6.2</span><br></pre></td></tr></table></figure><p>To install all of the packages listed in the <code>requirements.txt</code> file, run the following command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt </span><br></pre></td></tr></table></figure><p>In this step, you installed all the packages necessary for this tutorial.<br>Next, you will get a basic understanding of how the project is structured.</p><h2 id="Step-2-High-Level-Design"><a href="#Step-2-High-Level-Design" class="headerlink" title="Step 2 - High Level Design"></a>Step 2 - High Level Design</h2><p>In order to support various sources in a convinient way, we will create a base abstract class called <code>Source</code>.<br>Every source that we wish to add will inherit from it and extend its functionality.<br>In this post I am going to cover the <code>RedditSource</code> and <code>MediumSource</code>, both are subclasses of <code>Source</code>.</p><p>Lastly, we will have a <code>SourceManager</code> which will be given a list of sources and will trigger each source fetching mechanism.</p><p>In this step, you got a basic understanding of the project’s structure.<br>Next, you will implement the base abstract class <code>Source</code></p><h2 id="Step-3-Implementing-the-Base-Class"><a href="#Step-3-Implementing-the-Base-Class" class="headerlink" title="Step 3 - Implementing the Base Class"></a>Step 3 - Implementing the Base Class</h2><p>In this step, you will implement the base abstract class <code>Source</code>.</p><p>Open a new file called <code>models.py</code> and write the following code</p><figure class="highlight python"><figcaption><span>models.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Source</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>The above class has two functionalities - one is to connect to the source if needed (via API key for example) and a second one is to fetch content from the source.<br>The implementation will stay empty in this class and every specific source will have to implement the mentioned functionality.</p><p>In this step, you implemented the base abstract class <code>Source</code>.<br>Next, you will implement the <code>SourceManager</code> class.</p><h2 id="Step-4-Implementing-the-Manager-Class"><a href="#Step-4-Implementing-the-Manager-Class" class="headerlink" title="Step 4 - Implementing the Manager Class"></a>Step 4 - Implementing the Manager Class</h2><p>In this step, you will implement the <code>SourceManager</code> class.</p><p>Open the file <code>models.py</code> and write the following code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[label models.py]</span><br><span class="line">...</span><br><span class="line">from typing import List</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">class SourceManager:</span><br><span class="line">    def __init__(self, sources: List[Source] = None) -&gt; None:</span><br><span class="line">        if not sources:</span><br><span class="line">            self.sources = []</span><br><span class="line">        else:</span><br><span class="line">            self.sources = sources</span><br><span class="line"></span><br><span class="line">    def __call__(self) -&gt; None:</span><br><span class="line">        for source in self.sources:</span><br><span class="line">            source.fetch()</span><br><span class="line">            print(source)</span><br><span class="line"></span><br><span class="line">    def add(self, source: Source) -&gt; None:</span><br><span class="line">        self.sources.append(source)</span><br></pre></td></tr></table></figure><p>As discussed in the high level design step, the <code>SourceManager</code> will get a list of sources, and upon calling it, the <code>SourceManager</code> will trigger each source <code>fetch</code> function and print the results.</p><p>There is also a function to add sources which is currently unused, but might be useful later on.</p><p>In this step, you implemented the <code>SourceManager</code> class and basically finished writing the wrapping of this application.<br>Next, you will learn how to fetch content from reddit and implement the <code>RedditSource</code> class.</p><h2 id="Step-5-Implementing-Reddit-Source"><a href="#Step-5-Implementing-Reddit-Source" class="headerlink" title="Step 5 - Implementing Reddit Source"></a>Step 5 - Implementing Reddit Source</h2><p>In this step, you will implement the <code>RedditSource</code> class.</p><p>To start with, you will need to get an API key in order to use the <code>praw</code> library and query Reddit’s API.<br>Here’s a short guide on <a href="https://github.com/reddit-archive/reddit/wiki/OAuth2-Quick-Start-Example#first-steps">Reddit’s github</a> on how to do so -<br>Make sure you have a client id and a client secret.</p><p>Once you have the client id and secret, add them as environment variables <code>REDDIT_CLIENT_ID</code> and <code>REDDIT_CLIENT_SECRET</code>.</p><p>Now, create a new file called <code>reddit_source.py</code> and open it.<br>Let’s first take care of the minimal necassary implementation which is defined by the <code>Source</code> class.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[label reddit_source.py]</span><br><span class="line"></span><br><span class="line">from models import Source, Result</span><br><span class="line">from typing import List</span><br><span class="line">import praw</span><br><span class="line">from praw.reddit import Reddit</span><br><span class="line">import os</span><br><span class="line">from colorama import Fore, Style</span><br><span class="line"></span><br><span class="line">CLIENT_ID = os.environ.get(&#x27;REDDIT_CLIENT_ID&#x27;)</span><br><span class="line">CLIENT_SECRET = os.environ.get(&#x27;REDDIT_CLIENT_SECRET&#x27;)</span><br><span class="line"></span><br><span class="line">class RedditSource(Source):</span><br><span class="line"></span><br><span class="line">    def __init__(self, subreddit: str, limit: int = 10, metric: str = &#x27;hot&#x27;) -&gt; None:</span><br><span class="line">        self.results: List[Result] = []</span><br><span class="line">        self.valid_metrics = [&#x27;hot&#x27;, &#x27;top&#x27;]</span><br><span class="line">        self.reddit_con = self.connect()</span><br><span class="line">        self.subreddit = subreddit</span><br><span class="line">        self.limit = limit</span><br><span class="line">        self.metric = metric</span><br><span class="line"></span><br><span class="line">    def connect(self) -&gt; Reddit:</span><br><span class="line">        self.reddit_con = praw.Reddit(client_id=CLIENT_ID,</span><br><span class="line">                     client_secret=CLIENT_SECRET,</span><br><span class="line">                     grant_type_access=&#x27;client_credentials&#x27;,</span><br><span class="line">                     user_agent=&#x27;script/1.0&#x27;)</span><br><span class="line">        return self.reddit_con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fetch(self) -&gt; List[Result]: </span><br><span class="line">        if not self.subreddit or self.limit &lt; 0 or self.metric.lower() not in self.valid_metrics:</span><br><span class="line">            return</span><br><span class="line">        </span><br><span class="line">        if self.metric == &#x27;hot&#x27;:</span><br><span class="line">            raw_results = self.reddit_con.subreddit(self.subreddit).hot(limit=self.limit)</span><br><span class="line">        else:</span><br><span class="line">            raw_results = self.reddit_con.subreddit(self.subreddit).top(limit=self.limit)</span><br><span class="line"></span><br><span class="line">        self.results = self.reformat_results(raw_results) # will be defined soon</span><br><span class="line"></span><br><span class="line">        return self.results</span><br></pre></td></tr></table></figure><p>Let’s go through the implementation briefly, starting with the <code>init</code> method, you will get a subreddit you wish to query, the metric you wish to query on which is either hot or top and a limit of results you want to see.</p><p>Inside the <code>init</code> function, we create a connection to Reddit’s API via the praw library.<br>In order to create the connection, you should pass the client id and secret that you generated in the begining of this step.</p><p>Next, going over the <code>fetch</code> method, depending on the metric you got, you retrieve the matching results from <code>praw</code> using the connection object.</p><p>Lastly, we reformat the results from the API so that results across different sources will have a unified representation.</p><p>To create a unified representation, open the file <code>models.py</code> and add the following <code>Result</code> class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[label models.py]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">from colorama import Fore, Style</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class Result:</span><br><span class="line">    def __init__(self, title: str, url: str) -&gt; None:</span><br><span class="line">        self.title = title</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    def __repr__(self) -&gt; str:</span><br><span class="line">        return f&quot;* \t &#123;Fore.CYAN&#125;&#123;self.title&#125;&#123;Style.RESET_ALL&#125;: &#123;Fore.MAGENTA&#125;&#123;self.url&#125; &#123;Style.RESET_ALL&#125; \n&quot;</span><br></pre></td></tr></table></figure><p>The above <code>Result</code> class simply gets the title and the url of the post we queried and prints it to the terminal using <code>colorama</code> module.</p><p>After creating the <code>Result</code> class, come back to the <code>reddit_source.py</code> file and finish the implementation of the <code>RedditSource</code> class.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[label reddit_source.py]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class RedditSource(Source):</span><br><span class="line">...</span><br><span class="line">    def reformat_results(self, raw_results) -&gt; List[Result]:</span><br><span class="line">        reformatted_results = []</span><br><span class="line">        for result in raw_results:</span><br><span class="line">            reformatted_results.append(</span><br><span class="line">                Result(</span><br><span class="line">                    title=vars(result)[&#x27;title&#x27;],</span><br><span class="line">                    url=vars(result)[&#x27;url&#x27;]</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        return reformatted_results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __repr__(self) -&gt; str:</span><br><span class="line">        output = f&quot;&#123;Fore.GREEN&#125;Reddit Source Results [Sub: &#123;self.subreddit&#125;, Metric: &#123;self.metric&#125;]&#123;Style.RESET_ALL&#125; \n&quot;</span><br><span class="line">        for result in self.results:</span><br><span class="line">            output += f&quot;&#123;result&#125; \n&quot;</span><br><span class="line">        return output</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The <code>reformat_results</code> function is responsible for taking the raw results given from the API and transforming it to the unified representation class you created earlier.</p><p>Lastly, by implementing the <code>__repr__</code> method, you can print all the results that you fetched and the implementation of the <code>RedditSource</code> is done.</p><p>In this step, you implemented the <code>RedditSource</code> class and created a unified representation for all different sources.<br>Next, you will get a taste of what’s already implemented by executing the program.</p><h2 id="Step-6-Executing-Partial-Implementation"><a href="#Step-6-Executing-Partial-Implementation" class="headerlink" title="Step 6 - Executing Partial Implementation"></a>Step 6 - Executing Partial Implementation</h2><p>In this step, you will execute what you have implemented so far.</p><p>To do so, create a file called <code>main.py</code> and use the following code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[label main.py]</span><br><span class="line"></span><br><span class="line">from reddit_source import RedditSource</span><br><span class="line">from models import SourceManager</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    reddit_programming = RedditSource(subreddit=&#x27;programming&#x27;, limit=3, metric=&#x27;hot&#x27;)</span><br><span class="line">    reddit_showerthoughts = RedditSource(subreddit=&#x27;showerthoughts&#x27;, limit=3, metric=&#x27;top&#x27;)</span><br><span class="line">    </span><br><span class="line">    source_manager = SourceManager([reddit_programming, reddit_showerthoughts])</span><br><span class="line">    source_manager()</span><br></pre></td></tr></table></figure><p>The above code simply creates two reddit sources, the first is for programming subreddit and the second for shower thoughts subreddit.<br>After creating these sources, we pass them as a list to the <code>SourceManager</code> and call it in order to execute the program.</p><p>Execute your program with </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/50831652/167283996-7da10955-b00b-4a88-9bdc-f9b9297fd2a7.JPG" alt="Capture"></p><p>In this step, you executed what you implemented in the last 5 steps.<br>Next, you will add an additional source, which will be <code>Medium</code>.</p><h2 id="Step-7-Implementing-Medium-Source"><a href="#Step-7-Implementing-Medium-Source" class="headerlink" title="Step 7 - Implementing Medium Source"></a>Step 7 - Implementing Medium Source</h2><p>In this step, you will implement the <code>MediumSource</code> class.</p><p>As we did before, let’s first take care of the minimal necassary implementation which is defined by the <code>Source</code> class.</p><p>Create a new file called <code>medium_source.py</code> and use the following code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[label medium_source.py]</span><br><span class="line"></span><br><span class="line">from typing import List</span><br><span class="line">from models import Source, Result</span><br><span class="line">import feedparser</span><br><span class="line">from colorama import Fore, Style</span><br><span class="line"></span><br><span class="line">class MediumSource(Source):</span><br><span class="line">    </span><br><span class="line">    def __init__(self, tag, limit=10) -&gt; None:</span><br><span class="line">        self.results: List[Result] = []</span><br><span class="line">        self.tag = tag</span><br><span class="line">        self.limit = limit</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def fetch(self) -&gt; List[Result]:</span><br><span class="line">        if not self.tag or self.limit &lt; 0:</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        raw_results = feedparser.parse(f&quot;https://medium.com/feed/tag/&#123;self.tag&#125;&quot;).entries[:self.limit]</span><br><span class="line"></span><br><span class="line">        self.results = self.reformat_results(raw_results)</span><br><span class="line">        return self.results</span><br></pre></td></tr></table></figure><p>As you might have noticed, the <code>MediumSource</code> is slighly different than the <code>RedditSource</code>.<br>Here, we don’t need to connect through an API, so the implementation of <code>connect</code> will remain empty.</p><p>To query this source, we will use the <code>feedparser</code> module which will retrieve results based on tagging from the Medium feed.</p><p>To complete the implementation, we are missing the <code>reformat_results</code> and <code>__repr__</code> functions which will look quite similar to the <code>RedditSource</code> matching functions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[label medium_source.py]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class MediumSource(Source):</span><br><span class="line">...</span><br><span class="line">    def reformat_results(self, raw_results) -&gt; List[Result]:</span><br><span class="line">        results = []</span><br><span class="line">        for result in raw_results:</span><br><span class="line">            results.append(</span><br><span class="line">                Result(</span><br><span class="line">                    title=result.title,</span><br><span class="line">                    url=result.link</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        return results</span><br><span class="line"></span><br><span class="line">    def __repr__(self) -&gt; str:</span><br><span class="line">        output = f&quot;&#123;Fore.GREEN&#125;Medium Source Results [Tag: &#123;self.tag&#125;]&#123;Style.RESET_ALL&#125; \n&quot;</span><br><span class="line">        for result in self.results:</span><br><span class="line">            output += f&quot;&#123;result&#125; \n&quot;</span><br><span class="line">        return output</span><br></pre></td></tr></table></figure><p>As in the <code>RedditSource</code> class, the <code>reformat_results</code> function is responsible for transforming the raw results we queried into the unified representation class you created in an earlier step.</p><p>In this step, you implemented the <code>MediumSource</code> class, and by doing so finished implementing your content aggregator (at least to the scope that I am going to cover).</p><p>Next, you will execute the entire program.</p><h2 id="Step-8-Executing-The-Program"><a href="#Step-8-Executing-The-Program" class="headerlink" title="Step 8 - Executing The Program"></a>Step 8 - Executing The Program</h2><p>Similarly to step 6, open <code>main.py</code>.<br>You should have the following implementation there from step 6.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[label main.py]</span><br><span class="line"></span><br><span class="line">from reddit_source import RedditSource</span><br><span class="line">from models import SourceManager</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    reddit_programming = RedditSource(subreddit=&#x27;programming&#x27;, limit=3, metric=&#x27;hot&#x27;)</span><br><span class="line">    reddit_showerthoughts = RedditSource(subreddit=&#x27;showerthoughts&#x27;, limit=3, metric=&#x27;top&#x27;)</span><br><span class="line">    </span><br><span class="line">    source_manager = SourceManager([reddit_programming, reddit_showerthoughts])</span><br><span class="line">    source_manager()</span><br></pre></td></tr></table></figure><p>Now, you can throw another type of source in, which is the <code>MediumSource</code>.</p><p>Note: All the new lines or lines that were changed are marked in <code>#new</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[label main.py]</span><br><span class="line"></span><br><span class="line">from reddit_source import RedditSource</span><br><span class="line">from medium_source import MediumSource # new </span><br><span class="line">from models import SourceManager</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    reddit_programming = RedditSource(subreddit=&#x27;programming&#x27;, limit=3, metric=&#x27;hot&#x27;)</span><br><span class="line">    reddit_showerthoughts = RedditSource(subreddit=&#x27;showerthoughts&#x27;, limit=3, metric=&#x27;top&#x27;)</span><br><span class="line">    medium_programming = MediumSource(tag=&#x27;programming&#x27;, limit=3) # new</span><br><span class="line">    </span><br><span class="line">    source_manager = SourceManager([reddit_programming, reddit_showerthoughts, medium_programming]) # new</span><br><span class="line">    source_manager()</span><br></pre></td></tr></table></figure><p>Now, execute your program with the command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/50831652/167284519-4e46543a-76b7-4d13-9abf-a1f32a9500c6.JPG" alt="Capture"></p><p>In this step, you executed your content aggregator and you are ready to add more sources on your own.</p><h2 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next"></a>What’s Next</h2><p>As I mentioned earlier, I turned this content aggregator project into an open source tool called <code>Fuse</code>.</p><p>If you are excited about adding more sources I invite you to challenge yourself and contribute to <a href="https://github.com/Eliran-Turgeman/Fuse">Fuse</a></p><p>If you are willing to contribute and facing some problems don’t hesitate to reach out.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;A content aggregator is simply</summary>
      
    
    
    
    <category term="Open Source" scheme="https://eliran-turgeman.github.io/categories/Open-Source/"/>
    
    <category term="Project" scheme="https://eliran-turgeman.github.io/categories/Open-Source/Project/"/>
    
    <category term="Python" scheme="https://eliran-turgeman.github.io/categories/Open-Source/Project/Python/"/>
    
    
    <category term="Python" scheme="https://eliran-turgeman.github.io/tags/Python/"/>
    
    <category term="Aggregator" scheme="https://eliran-turgeman.github.io/tags/Aggregator/"/>
    
    <category term="CLI" scheme="https://eliran-turgeman.github.io/tags/CLI/"/>
    
    <category term="Open Source" scheme="https://eliran-turgeman.github.io/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>How To Build an API with Python FastAPI</title>
    <link href="https://eliran-turgeman.github.io/2022/05/04/corals-api/"/>
    <id>https://eliran-turgeman.github.io/2022/05/04/corals-api/</id>
    <published>2022-05-04T09:18:25.000Z</published>
    <updated>2023-02-23T19:56:30.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>FastAPI is a relatively new and trending Python web framework for building APIs.<br>FastAPI’s tag line includes its benefits over other popular web frameworks such as Flask and Django - “high performance, easy to learn, fast to code”.</p><p><strong>Why FastAPI is faster?</strong></p><p>One of the main reasons FastAPI is faster, is that it utlizies Asyncronous Gateway Interface (ASGI) instead of Web Server Gateway Interface(WSGI).<br>WSGI is a long-standing Python standard for compatibility between web servers, frameworks, and applications, which is in the process of being replaced as the standard to ASGI.<br>In a nuteshell, ASGI can be faster than since WSGI can utilize a set of workers, and every worker can take care of a single request in a sequential manner while ASGI supports concurrency.<br>Read more about the differences between ASGI and WSGI in the <a href="https://asgi.readthedocs.io/en/latest/introduction.html">ASGI docs</a></p><p>&lt;$&gt;[note]<strong>Note:</strong> Django started supporting ASGI in version 3.0 (released in December 2019)<br>&lt;$&gt;</p><p>In this guide you will learn hands-on how to create a ready for production API with Python’s FastAPI.<br>You will build a complete API, including a persistent database, while implementing all CRUD operations (Create, Read, Update, Delete).</p><p>By the end of this tutorial, you’ll be able to create an API with a database from scratch using FastAPI.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>To complete this tutorial, you will need:</p><ul><li>A local development environment for Python 3.6+ (<a href="https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3">Setting up</a>)</li><li>Familiarity with Python (<a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3">Python 3 guides</a>)</li><li>Familiarity with APIs and HTTP Requests  (<a href="https://www.digitalocean.com/community/tutorials/getting-started-with-python-requests-get-requests">API and HTTP guide</a>)</li><li>Familiarity with SQL (<a href="https://www.digitalocean.com/community/tutorial_series/how-to-use-sql">SQL guide</a>)</li><li><a href="https://www.kaggle.com/">Kaggle</a> user</li></ul><h2 id="Step-1-—-Installing-Dependencies"><a href="#Step-1-—-Installing-Dependencies" class="headerlink" title="Step 1 — Installing Dependencies"></a>Step 1 — Installing Dependencies</h2><p>In this step, you will install the modules that you will utilize later on in the tutorial. To do so, you will create a file that will hold the requirements for the entire project. </p><p>The packages you are going to install are:</p><ul><li>fastapi - The web framework you are going to work with</li><li>uvicorn - An ASGI server implementation that will help us execute our API</li><li>pydantic - A data validation module that you will use to enforce type checks</li><li>typing - Adding support for type hints</li><li>pathlib - Object-oriented filesystem paths that will help us manage our database</li><li>pandas - Data analysis and manipulation tool that you will use to load our database</li><li>requests - HTTP requests library<br>Create a new file called <code>requirements.txt</code>.<br>Each line in this file will include the name of the package and the required version to install.<br>Copy the following requirements to your <code>requirements.txt</code> file</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fastapi==0.64.0</span><br><span class="line">uvicorn==0.11.5</span><br><span class="line">pydantic==1.8.1</span><br><span class="line">typing==3.6.2</span><br><span class="line">pathlib==1.0.1</span><br><span class="line">pandas==1.3.0</span><br><span class="line">requests==2.26.0</span><br></pre></td></tr></table></figure><p>To install all of the packages listed in the <code>requirements.txt</code> file, run the following command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt </span><br></pre></td></tr></table></figure><p>In this step, you installed all the packages necessary for this tutorial.<br>Next, you will get a quick taste of FastAPI, just to verify everything is ready before building our API.</p><h2 id="Step-2-—-Creating-a-Hello-World-API"><a href="#Step-2-—-Creating-a-Hello-World-API" class="headerlink" title="Step 2 — Creating a Hello World API"></a>Step 2 — Creating a Hello World API</h2><p>In this step, you are going to set up a minimal API and verify that our installations succeeded. Our minimal API is going to have a single API call which will simply greet the user upon accessing the root path of our API.</p><p>Create a file called <code>api.py</code> and open it in your editor.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[label api.py]</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>In the above code snippet, you imported the  FastAPI module and created an instance of it called <code>app</code>.<br>Then, you declared a function called <code>root</code> that will be triggered whenever the user access the path “&#x2F;“ within our API.<br>By the decorator of this function, you can tell it implements a GET request, by the usage of <code>app.get</code> in the decorator.</p><p>This minimal API is going to serve us later on in the tutorial and will allow us to greet our users.<br>Note that the URL that is passed to <code>@app.get</code> is <code>&quot;/&quot;</code> which means that it will be the main page of our API.</p><p>In order to test that our API work, you should run the following command in your terminal.<br>The below command will deploy your application to your localhost using the module <a href="https://www.uvicorn.org/"><code>uvicorn</code></a>, which is an ASGI server implementation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn api:app --reload</span><br></pre></td></tr></table></figure><p>You should see the following output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</span><br><span class="line">INFO:     Started reloader process [28720]</span><br><span class="line">INFO:     Started server process [28722]</span><br><span class="line">INFO:     Waiting for application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br></pre></td></tr></table></figure><p>Open your browser and access the address specified in the output <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a></p><p>If everything went as planned, you should be able to see a blank page with the message</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;message&quot;: &quot;Hello World&quot;&#125;</span><br></pre></td></tr></table></figure><p>You might want to use this API call that uses <code>&quot;/&quot;</code> as URL for a different purpose, but in the API you are going to build today, this URL will simply greet our users.</p><p>In this step, you created a minimal API and went through the process of executing it on our localhost.<br>Now you should be ready to start writing our complete API, but before you do, let’s discuss what purpose our API is going to serve.</p><h2 id="Step-3-—-Creating-a-database"><a href="#Step-3-—-Creating-a-database" class="headerlink" title="Step 3 — Creating a database"></a>Step 3 — Creating a database</h2><p>The theme of our API to be Deep Sea Corals, and for that reason, I am going to use the following <a href="https://www.kaggle.com/noaa/deep-sea-corals">Kaggle dataset</a> as our resource. Download the CSV file attached in the above link as it will be our dataset you will work with.</p><p>Before jumping into the code, you will need to do some thinking - “what do I want to achieve with this API?”</p><p>There can be many different ideas for your API purpose and operations you wish to allow, but for the sake of this tutorial you are going to focus on the following API capabilities</p><ul><li>Query a coral by identification</li><li>Query a list of corals by their category</li><li>Create a new coral</li><li>Update an existing coral</li><li>Delete a coral</li></ul><p>After laying our plans down, you will now create the back-end of our back-end application which is obviously our database.</p><p>Our database implementation will relay on two components, or rather, files - <code>database.py</code> and <code>database_utils.py</code>.<br>In this step, you will focus on the <code>database_utils.py</code> file which will be responsible for handling the access to our database.<br>The second file, <code>database.py</code>, will be used on a later step.</p><p>Open the <code>database_utils.py</code> file and let’s start coding, starting from the imports section.<br>These imports will include:</p><ul><li><code>Path</code> which will help us determine if you have a .db file or you will have to create one.</li><li><code>sqlite3</code> which is the database library you will use in this tutorial.</li><li><code>pandas</code> which will help us convert the CSV file you downloaded into an sqlite database.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><p>Now, in order to “convert” our raw CSV dataset file into a sqlite3 database, you will have to perform the following actions</p><ul><li>Create a .db file</li><li>Write the dataset into our .db file</li></ul><p>I divided these tasks into a few functions, but before we get into those, make sure you have the following constants in your <code>database_utils.py</code> file.<br>The <code>DB_FILENAME</code> constant will store the name of our .db file that you will create.<br>The <code>COLUMNS</code> constant will store the names of the columns you wish to use from the dataset you have downloaded.<br>Note that our dataset is pretty large, so I chose a partial list out of the original columns that you will use.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line">DB_FILENAME = <span class="string">&quot;corals_db.db&quot;</span></span><br><span class="line"></span><br><span class="line">COLUMNS = [<span class="string">&#x27;catalog_number&#x27;</span>, <span class="string">&#x27;data_provider&#x27;</span>, <span class="string">&#x27;scientific_name&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vernacular_name_category&#x27;</span>, <span class="string">&#x27;taxon_rank&#x27;</span>, <span class="string">&#x27;station&#x27;</span>, <span class="string">&#x27;observation_date&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;latitude&#x27;</span>, <span class="string">&#x27;longitude&#x27;</span>, <span class="string">&#x27;depth&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Moving onto our first function, you will create a .db file.<br>The function below will check whether you have a .db file using the <code>Path</code> module, and if you don’t - you will create one.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>(<span class="params">filename: <span class="built_in">str</span> = DB_FILENAME</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Path(filename).is_file():</span><br><span class="line">        Path(filename).touch()</span><br></pre></td></tr></table></figure><p>Next, you will use <code>pandas</code> in order to read the CSV file and convert it to our SQLite database file.</p><p>This function below, will utilize the <code>init_db</code> function you created above, to guarantee that you have a .db file and then, using the <code>sqlite3</code> and <code>pandas</code> modules you will create our database and a table within that database called <code>Corals</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_csv_to_db</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    init_db(DB_FILENAME)</span><br><span class="line">    conn = sqlite3.connect(DB_FILENAME)</span><br><span class="line"></span><br><span class="line">    corals_data = pd.read_csv(<span class="string">&#x27;deep_sea_corals.csv&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Dropping columns I am not intending to keep in the database</span></span><br><span class="line">    corals_data.drop([<span class="string">&#x27;DepthMethod&#x27;</span>, <span class="string">&#x27;Locality&#x27;</span>, <span class="string">&#x27;LocationAccuracy&#x27;</span>, <span class="string">&#x27;SurveyID&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;Repository&#x27;</span>, <span class="string">&#x27;IdentificationQualifier&#x27;</span>, <span class="string">&#x27;EventID&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;SamplingEquipment&#x27;</span>, <span class="string">&#x27;RecordType&#x27;</span>, <span class="string">&#x27;SampleID&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">                    </span><br><span class="line">    corals_data.columns = COLUMNS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        corals_data.to_sql(<span class="string">&#x27;Corals&#x27;</span>, conn, if_exists=<span class="string">&#x27;fail&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Table already exists&quot;</span>)</span><br></pre></td></tr></table></figure><p>Another utility function that would be useful is one that will check if our table exists or not.<br>The function below will connect to our sqlite database and execute an SQL query which will result in either 0 or 1 in accordance to the existance of the <code>Corals</code> table in our database.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_table_exists</span>() -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    conn = sqlite3.connect(DB_FILENAME)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SELECT count(*) FROM sqlite_master WHERE type=&#x27;table&#x27; AND name=&#x27;Corals&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cursor.fetchone()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>Now in order to bring everything together, you are going to create a context manager for our database, so you will be able to access it in a clean way without replicating code on every function that wishes to access the database.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[label database_utils.py]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoralDatabase</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file=DB_FILENAME</span>):</span><br><span class="line">        self.file = file</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_table_exists():</span><br><span class="line">            load_csv_to_db()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn = sqlite3.connect(self.file)</span><br><span class="line">        self.conn.row_factory = sqlite3.Row</span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        <span class="keyword">return</span> self.cursor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, traceback</span>):</span><br><span class="line">        self.conn.commit()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure><p>Now whenever you want to access our database, instead of setting up a connection, creating a cursor, etc, you can simply utilize our context manager with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">with</span> CoralDatabase() <span class="keyword">as</span> cursor:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&lt;$&gt;[note]<br><strong>Note:</strong> The above snippet shouldn’t be added to any file right now, it serves as an example of how you will use the context manager in later steps.<br>&lt;$&gt;</p><p>Whenever you will use this statement, the <code>__init__</code> and <code>__enter__</code> functions will be triggered. These functions are responsible for making sure that the <code>Corals</code> table exists and for setting up the connection to the database.</p><p>Then when you will be done with the .db file, the <code>__exit__</code> function will be triggered which will commit our changes and close the file.</p><p>&lt;$&gt;[note]<br><strong>Note:</strong> If not for the context manager, every single function that accesses the database will have to provide the same functionality of setting up the conntection, commiting changes and closing the database which is just a horrible practice since there would be a lot of replicated code for every single access your application will make to the database.<br>&lt;$&gt;</p><p>Congratulations, you finished setting up our database utilities, next you will implement our API calls and database queries side by side.</p><h2 id="Step-4-Implementing-the-API-GET-Requests"><a href="#Step-4-Implementing-the-API-GET-Requests" class="headerlink" title="Step 4 - Implementing the API - GET Requests"></a>Step 4 - Implementing the API - GET Requests</h2><p>In this step, you are going to start implementing our API calls, you will implement 2 different API calls which will allow us to retrieve a single coral by its catalog number, and retrieve a set of corals by their category.<br>For each of the API calls mentioned in step 3, you will create a database query and a matching API call that utilizes the query.</p><p>Create a file named <code>corals-api.py</code> and let’s create our first API call.</p><p>First, let’s take care of the imports section, some of the modules may seem unfamiliar but I will go over each and everyone once you get to use it.<br>Aside from FastAPI imports, you will use pydantic to create a model of the resource of our database - corals.<br>In addition, you will import starlette to use it’s status codes so you would be able to return to the user a meaningful status code with every API call he makes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Path, status</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="keyword">from</span> starlette.status <span class="keyword">import</span> (</span><br><span class="line">    HTTP_200_OK,</span><br><span class="line">    HTTP_404_NOT_FOUND,</span><br><span class="line">    HTTP_409_CONFLICT</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> database_utils <span class="keyword">import</span> CoralDatabase</span><br></pre></td></tr></table></figure><p>Next, you will create an API and CoralDatabase instances</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line">app = FastAPI()</span><br><span class="line">db = CoralDatabase()</span><br></pre></td></tr></table></figure><p>Our first API call would be very similar to the API call you implemented in step 2.</p><p>The following API call will simply greet our user in the same manner you already did.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;Welcome to Corals-API&quot;</span>&#125;,</span><br><span class="line">                        status_code=HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>Next, you will implement <code>get_coral_by_catalog_number</code> which will retrieve a coral information by its catalog number.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/coral/&#123;catalog_number&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coral_by_catalog_number</span>(<span class="params">catalog_number: <span class="built_in">int</span> = Path(<span class="params"><span class="literal">None</span>, description=<span class="string">&quot;Catalog Number of the coral to retrieve&quot;</span></span>)</span>):</span><br><span class="line">    coral = get_coral_by_catalog_number_db(catalog_number)</span><br><span class="line">    <span class="keyword">return</span> api_reply(coral)</span><br></pre></td></tr></table></figure><p>At first glance, this function might seem unclear so let’s break it down.</p><p>Firstly, you are using a <code>Path</code> object from the <code>fastapi</code> module which corresponds to a path parameter.</p><p>In the above API call, the variable <code>catalog_number</code> which is embedded in the URL of the request is called a path parameter, and you have a corresponding argument in our function arguments with the exact same name.</p><p>The parameters passed to the <code>Path</code> object include the default value of the parameter which I chose to be <code>None</code>, and the description of the parameter which gives an explanation to the user what kind of information he should input.</p><p>One mystery solved, two more mysteries to go.<br>What is <code>get_coral_by_catalog_number_db</code>? This is the database query that will return the coral information based on the catalog number provided.<br>Let’s implement this function.</p><p>Create a <code>database.py</code> file, it will include all the database functions matching to our API calls.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> database_utils <span class="keyword">import</span> CoralDatabase, DB_FILENAME</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coral_by_catalog_number_db</span>(<span class="params">catalog_number: <span class="built_in">int</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">with</span> CoralDatabase(DB_FILENAME) <span class="keyword">as</span> cursor:</span><br><span class="line">        cursor.execute(<span class="string">&#x27;&#x27;&#x27;SELECT catalog_number, data_provider,</span></span><br><span class="line"><span class="string">           scientific_name, vernacular_name_category, taxon_rank,</span></span><br><span class="line"><span class="string">           observation_date, latitude, longitude, depth</span></span><br><span class="line"><span class="string">           FROM Corals WHERE catalog_number = ?&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                       (catalog_number,))</span><br><span class="line">        <span class="keyword">return</span> cursor.fetchone()</span><br></pre></td></tr></table></figure><p>The above function will fetch a coral’s information based on its catalog number while utilizing the context manager you created earlier.</p><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line">from database import get_coral_by_catalog_number_db</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The function <code>get_coral_by_catalog_number_db</code> will return an sqlite.Row object which will include all the information of the matching coral.</p><p>For example, just as an experiment, you can try and call <code>get_coral_by_catalog_number_db</code> from the bottom of <code>database.py</code> add these lines to run this function</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line">...</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">  output = get_coral_by_catalog_number_db(1)</span><br><span class="line">  print(list(output))</span><br></pre></td></tr></table></figure><p>Save <code>database.py</code>, go to your terminal and execute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 database.py</span><br></pre></td></tr></table></figure><p>when executing the script, while passing 1 as a catalog number, you will get the following output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[secondary_label Output]</span><br><span class="line">[1.0, &quot;Smithsonian Institution, National Museum of Natural History&quot;, &quot;Pourtalosmilia conferta&quot;, stony coral (cup coral), species, &quot;1964-04-14&quot;, &quot;34.95839&quot;, &quot;-75.32464&quot;, 146.0]</span><br></pre></td></tr></table></figure><p>This experiment has concluded, remove the lines you just added to <code>database.py</code>.<br>This test was to check that the call you implemented worked, and also to show the need of formatting of the output which you will implement in the next function.</p><!--3/1 Note Nice explanation here.-->After getting the results from the database query, you would want to "package" this result in some specific manner, normally in a JSON format, and then return the packaged result with a status code that will convey to the user if the API call was successful or that it encountered a problem during the request, for example when searching for a coral that is not in the database.<p>For the purpose of results packaging, I created a new file <code>api_utils.py</code>.</p><p>All API calls which are GET requests will have to return the user some packaged data. for that reason, I wrote a function called <code>api_reply</code> which gets the packaged result and returns it to the user in the form of a JSON.<br>The raw data is getting packaged in a second function called <code>prepare_result</code>.</p><p>First you will implement, <code>prepare_result</code>.<br>Given a data from the database - which you saw was returned as a list, you will create a dictionary with the column names as keys and the matching data from the list as values.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[label api_utils.py]</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="keyword">from</span> starlette.status <span class="keyword">import</span> (</span><br><span class="line">    HTTP_200_OK,</span><br><span class="line">    HTTP_404_NOT_FOUND,</span><br><span class="line">    HTTP_409_CONFLICT</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_result</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">list</span>):</span><br><span class="line">        data = [data]</span><br><span class="line">        </span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> idx, entry <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        result[idx] = &#123;<span class="string">&quot;CatalogNumber&quot;</span>: entry[<span class="number">0</span>],</span><br><span class="line">                       <span class="string">&quot;DataProvider&quot;</span>: entry[<span class="number">1</span>],</span><br><span class="line">                       <span class="string">&quot;ScientificName&quot;</span>: entry[<span class="number">2</span>],</span><br><span class="line">                       <span class="string">&quot;VernacularNameCategory&quot;</span>: entry[<span class="number">3</span>],</span><br><span class="line">                       <span class="string">&quot;TaxonRank&quot;</span>: entry[<span class="number">4</span>],</span><br><span class="line">                       <span class="string">&quot;ObservationDate&quot;</span>: entry[<span class="number">5</span>],</span><br><span class="line">                       <span class="string">&quot;Latitude&quot;</span>: entry[<span class="number">6</span>],</span><br><span class="line">                       <span class="string">&quot;Longitude&quot;</span>: entry[<span class="number">7</span>],</span><br><span class="line">                       <span class="string">&quot;Depth&quot;</span>: entry[<span class="number">8</span>]</span><br><span class="line">                       &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>Next, you will create <code>api_reply</code> which is simply wrapping <code>prepare_result</code> and returning a JSON from the dictionary you created at <code>prepare_result</code>, along with a matching status code describing whether the operation succeeded or failed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[label api_utils.py]</span><br><span class="line">...</span><br><span class="line">def api_reply(data):</span><br><span class="line">    if not data:</span><br><span class="line">        return JSONResponse(&#123;&#x27;message&#x27;: &#x27;Coral Not Found&#x27;&#125;,</span><br><span class="line">                            status_code=HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    result = prepare_result(data)</span><br><span class="line"></span><br><span class="line">    return JSONResponse(&#123;&#x27;message&#x27;: &#x27;Coral Found&#x27;,</span><br><span class="line">                         &#x27;data&#x27;: result&#125;, status_code=HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>Save and close the file.</p><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api]</span><br><span class="line">...</span><br><span class="line">from api_utils import api_reply</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Following our previous experiment, if you call <code>prepare_result</code> with the output you got in the first experiment, you will receive the below output.<br>Similar to what you did in the first experiment, add these lines to the end of &#96;corals-api.py’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">  from api_utils import prepare_result</span><br><span class="line">  output = get_coral_by_catalog_number_db(1)</span><br><span class="line">  formatted_output = prepare_result(output)</span><br><span class="line">  print(formatted_output)</span><br></pre></td></tr></table></figure><p>Save <code>corals-api.py</code>, go to your terminal and execute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 corals-api.py</span><br></pre></td></tr></table></figure><p>when executing the script while passing 1 as a catalog number and calling the function that formats the results, you will get the following output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[secondary_label Output]</span><br><span class="line">&#123;0: &#123;&#x27;CatalogNumber&#x27;: 1.0, &#x27;DataProvider&#x27;: &#x27;Smithsonian Institution, National Museum of Natural History&#x27;, &#x27;ScientificName&#x27;: &#x27;Pourtalosmilia conferta&#x27;, &#x27;VernacularNameCategory&#x27;: &#x27;stony coral (cup coral)&#x27;, &#x27;TaxonRank&#x27;: &#x27;species&#x27;, &#x27;ObservationDate&#x27;: &#x27;1964-04-14&#x27;, &#x27;Latitude&#x27;: &#x27;34.95839&#x27;, &#x27;Longitude&#x27;: &#x27;-75.32464&#x27;, &#x27;Depth&#x27;: 146.0&#125;&#125;</span><br></pre></td></tr></table></figure><p>Then, the above dictionary will be passed into <code>api_reply</code> where it will be converted into JSON while adding a message and returning a status code.<br>To see the final output, you will call <code>api_reply</code> with the formated response as a parameter.</p><p>Delete the lines you just added to the end of <code>corals-api.py</code> and save your file.</p><p>In the end of <code>corals-api.py</code>, similar to our last test, write the below lines</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line">...</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">  output = get_coral_by_catalog_number_db(1)</span><br><span class="line">  reply = api_reply(output) </span><br><span class="line">  print(reply.body)</span><br></pre></td></tr></table></figure><p>Save <code>corals-api.py</code>, go to your terminal and execute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 corals-api.py</span><br></pre></td></tr></table></figure><p>when executing the script while passing 1 as a catalog number and calling <code>api_reply</code> on the output, you will get the following output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[secondary_label Output]</span><br><span class="line">&#123;&quot;message&quot;:&quot;Coral Found&quot;,&quot;data&quot;:&#123;&quot;0&quot;:&#123;&quot;CatalogNumber&quot;:1.0,&quot;DataProvider&quot;:&quot;Smithsonian Institution, National Museum of Natural History&quot;,&quot;ScientificName&quot;:&quot;Pourtalosmilia conferta&quot;,&quot;VernacularNameCategory&quot;:&quot;stony coral (cup coral)&quot;,&quot;TaxonRank&quot;:&quot;species&quot;,&quot;ObservationDate&quot;:&quot;1964-04-14&quot;,&quot;Latitude&quot;:&quot;34.95839&quot;,&quot;Longitude&quot;:&quot;-75.32464&quot;,&quot;Depth&quot;:146.0&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>The second experiment has concluded, delete the lines you just added to the end of <code>corals-api.py</code> and save your file.</p><p>Now that you got the hang of creating an API call, let’s create a second one.</p><p>As we discussed in step 3, our next API call will be able to retrieve corals by their category.</p><p>Just as before, you will begin with the API call.<br>This API call is going to be pretty similar to the first one.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/coral-category/&#123;coral_category&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coral_by_category</span>(<span class="params">coral_category: <span class="built_in">str</span> = Path(<span class="params"><span class="literal">None</span>, description=<span class="string">&quot;Category of corals you want to retrieve&quot;</span></span>)</span>):</span><br><span class="line">    corals = get_coral_by_category_db(coral_category)</span><br><span class="line">    <span class="keyword">return</span> api_reply(corals)</span><br></pre></td></tr></table></figure><p>Just as in the previous API call, you have a matching database query function, and usage of the packaging utility you already implemented.</p><p>The database query function will be pretty similar to the first one, the only variance would be the parameters by which you choose corals.</p><p>&lt;$&gt;[note]<br><strong>Note:</strong> In the following function, you use <code>cursor.fetchall()</code> in order to retrieve all corals that meet the criteria, opposed to <code>cursor.fetchone()</code> you used earlier.<br>&lt;$&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coral_by_category_db</span>(<span class="params">coral_category: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">with</span> CoralDatabase(DB_FILENAME) <span class="keyword">as</span> cursor:</span><br><span class="line">        cursor.execute(<span class="string">&#x27;&#x27;&#x27;SELECT catalog_number, data_provider,</span></span><br><span class="line"><span class="string">           scientific_name, vernacular_name_category, taxon_rank,</span></span><br><span class="line"><span class="string">           observation_date, latitude, longitude, depth</span></span><br><span class="line"><span class="string">           FROM Corals WHERE vernacular_name_category = ?&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                       (coral_category,))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cursor.fetchall()</span><br></pre></td></tr></table></figure><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api]</span><br><span class="line">...</span><br><span class="line">from database import get_coral_by_category_db</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>This function concludes the GET requests you will implement for this API.<br>Obviously, there are a lot more functionalities you can add, and I encourage you to think of ways to extend this API.</p><p>Ideas for extending:</p><ul><li>Retrieve all corals that were found under a depth threshold</li><li>Retrieve all corals reported by a specfic data provider</li><li>Retrieve all corals that were found in a spefici radius from a given coordinates</li></ul><p>In the next step, you will learn how to create POST requests, mainly used to create new resources, or in our case, new corals.</p><h2 id="Step-5-Implementing-the-API-POST-request"><a href="#Step-5-Implementing-the-API-POST-request" class="headerlink" title="Step 5 - Implementing the API - POST request"></a>Step 5 - Implementing the API - POST request</h2><p>In this step, you are going to create new corals and add them to our database.<br>You will create a model of the resource of the API - a coral and learn how to allow to user to pass such a model to your API in order to add a new resource.</p><p>Before diving into the implementation of this API call, you will create a <code>Coral</code> class that will specify what attributes a coral resource consists of.</p><p>The coral resource class will inherit from <code>BaseModel</code> in the <code>pydantic</code> module which validates and enforces type hints at runtime.<br>Meaning that the class you will create will include type hints on the attributes, and in case a user inputs for example a string in the field of the coral catalog number you will get a user-friendly error.</p><p>The resource class of corals will include all the different columns you store in the database as follows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coral</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    catalog_number: <span class="built_in">int</span></span><br><span class="line">    data_provider: <span class="built_in">str</span></span><br><span class="line">    scientific_name: <span class="built_in">str</span></span><br><span class="line">    vernacular_name_category: <span class="built_in">str</span></span><br><span class="line">    taxon_rank: <span class="built_in">str</span></span><br><span class="line">    station: <span class="built_in">str</span></span><br><span class="line">    observation_date: <span class="built_in">str</span></span><br><span class="line">    latitude: <span class="built_in">str</span></span><br><span class="line">    longitude: <span class="built_in">str</span></span><br><span class="line">    depth: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>After creating our humble resource class, you can move on to implementing the API call which will add a new coral to the database.</p><p>The structure of the API call is going to be pretty similar. You simply use a database query function and return a response based on its result.</p><p>As opposed to other calls, you will alter our database, which means that you have to be cautious and think where things could go wrong so you prevent them.</p><p>For example, when creating a new coral, a user might decide to give the new coral an already assigned catalog number.<br>In this implementation, I chose not to allow this kind of behaviour and added a check that verifies the coral catalog number I am about to add to the database isn’t already there.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/new-coral/&#123;catalog_number&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_coral</span>(<span class="params">catalog_number: <span class="built_in">int</span>, coral: Coral</span>):</span><br><span class="line">    <span class="keyword">if</span> get_coral_by_catalog_number_db(catalog_number):</span><br><span class="line">        <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Catalog Number Already Exists&#x27;</span>&#125;,</span><br><span class="line">                            status_code=HTTP_409_CONFLICT)</span><br><span class="line"></span><br><span class="line">    add_coral_to_db(catalog_number,</span><br><span class="line">                    coral.data_provider,</span><br><span class="line">                    coral.scientific_name,</span><br><span class="line">                    coral.vernacular_name_category,</span><br><span class="line">                    coral.taxon_rank,</span><br><span class="line">                    coral.station,</span><br><span class="line">                    coral.observation_date,</span><br><span class="line">                    coral.latitude,</span><br><span class="line">                    coral.longitude,</span><br><span class="line">                    coral.depth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Coral Created Successfully&#x27;</span>&#125;,</span><br><span class="line">                        status_code=status.HTTP_201_CREATED)</span><br></pre></td></tr></table></figure><p>&lt;$&gt;[note]<br><strong>Note:</strong> You utilized the database query function from a different API call in order to check if a coral with the given catalog number already exists in the database.<br>&lt;$&gt;</p><p>The only thing remaining to implement for this API call is the database function - <code>add_coral_to_db</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_coral_to_db</span>(<span class="params">catalog_number: <span class="built_in">int</span>, data_provider: <span class="built_in">str</span>, scientific_name: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                     vernacular_name_category: <span class="built_in">str</span>, taxon_rank: <span class="built_in">str</span>, station: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                      observation_date: <span class="built_in">str</span>, latitude: <span class="built_in">str</span>, longitude: <span class="built_in">str</span>, depth: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">with</span> CoralDatabase(DB_FILENAME) <span class="keyword">as</span> cursor:</span><br><span class="line">        cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        INSERT INTO Corals (&#x27;catalog_number&#x27;, &#x27;data_provider&#x27;, &#x27;scientific_name&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;vernacular_name_category&#x27;, &#x27;taxon_rank&#x27;, &#x27;station&#x27;, &#x27;observation_date&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;latitude&#x27;, &#x27;longitude&#x27;, &#x27;depth&#x27;) VALUES (?,?,?,?,?,?,?,?,?,?)&#x27;&#x27;&#x27;</span>,</span><br><span class="line">         (catalog_number, data_provider, scientific_name, vernacular_name_category,</span><br><span class="line">          taxon_rank, station, observation_date, latitude, longitude, depth))</span><br></pre></td></tr></table></figure><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api]</span><br><span class="line">...</span><br><span class="line">from database import add_coral_to_db</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In the next step, you will implement a PUT request which will allow us to update coral’s information in our database.</p><h2 id="Step-6-Implementing-the-API-PUT-request"><a href="#Step-6-Implementing-the-API-PUT-request" class="headerlink" title="Step 6 - Implementing the API - PUT request"></a>Step 6 - Implementing the API - PUT request</h2><p>In this step, you will implement an API call which will allow the user to update a coral’s data in our database.</p><p>&lt;$&gt;[note]<br><strong>Note:</strong> This is not necessarily a behaviour you’d want to implement, at least not for every user.<br>I am merely showing this for educational purposes.<br>&lt;$&gt;</p><p>After getting this out of the way, let’s consider the implementation of the API call.</p><p>Like in the POST request API call you implemented, you will have to apply some verification to the user’s request since he&#x2F;she might ask to update a coral that’s not in our database.</p><p>While writing this code, I was trying to be consistent so hopefully you already know how’s this function is going to look like - a verification check that the coral you are trying to update exists, a database function which will take care of actually updating the information and a JSON response with a matching status code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/update-coral/&#123;catalog_number&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_coral</span>(<span class="params">catalog_number: <span class="built_in">str</span>, coral: Coral</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> get_coral_by_catalog_number_db(catalog_number):</span><br><span class="line">        <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Coral Not Found&#x27;</span>&#125;,</span><br><span class="line">                            status_code=HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    update_coral_db(catalog_number,</span><br><span class="line">                coral.data_provider,</span><br><span class="line">                coral.scientific_name,</span><br><span class="line">                coral.vernacular_name_category,</span><br><span class="line">                coral.taxon_rank,</span><br><span class="line">                coral.station,</span><br><span class="line">                coral.observation_date,</span><br><span class="line">                coral.latitude,</span><br><span class="line">                coral.longitude,</span><br><span class="line">                coral.depth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Coral Information Updated&#x27;</span>&#125;,</span><br><span class="line">                        status_code=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>You already know what is coming next, let’s dive into the database query function <code>update_coral_db</code>.</p><p>Since you want to allow the user to update certain fields but not others you will gradually set the new coral’s information - one attribute for each query.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_coral_db</span>(<span class="params">catalog_number_identifier: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                data_provider: <span class="built_in">str</span> = <span class="literal">None</span>, scientific_name: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                vernacular_name_category: <span class="built_in">str</span> = <span class="literal">None</span>, taxon_rank: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                station: <span class="built_in">str</span> = <span class="literal">None</span>, observation_date: <span class="built_in">str</span> = <span class="literal">None</span>, latitude: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                longitude: <span class="built_in">str</span> = <span class="literal">None</span>, depth: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">    params = [data_provider, scientific_name, vernacular_name_category,</span><br><span class="line">                taxon_rank, station, observation_date, latitude, longitude,</span><br><span class="line">                depth]</span><br><span class="line">    params_names = [<span class="string">&#x27;data_provider&#x27;</span>, <span class="string">&#x27;scientific_name&#x27;</span>, <span class="string">&#x27;vernacular_name_category&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;taxon_rank&#x27;</span>, <span class="string">&#x27;station&#x27;</span>, <span class="string">&#x27;observation_date&#x27;</span>, <span class="string">&#x27;latitude&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;longitude&#x27;</span>, <span class="string">&#x27;depth&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> CoralDatabase(DB_FILENAME) <span class="keyword">as</span> cursor:</span><br><span class="line">        <span class="keyword">for</span> param, param_name <span class="keyword">in</span> <span class="built_in">zip</span>(params, params_names):</span><br><span class="line">            <span class="keyword">if</span> param <span class="keyword">and</span> param != <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">                query = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                UPDATE Corals SET &#x27;&#x27;&#x27;</span> + param_name + <span class="string">&#x27;&#x27;&#x27; = ? WHERE catalog_number = ?&#x27;&#x27;&#x27;</span></span><br><span class="line">                cursor.execute(query, (param, catalog_number_identifier))</span><br></pre></td></tr></table></figure><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api]</span><br><span class="line">...</span><br><span class="line">from database import update_coral_db</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>That concludes the PUT request step which allows the user to modify the information of a coral by its catalog number.</p><p>The next step would be the last step of the implementation where you will learn how to implement a DELETE request.</p><h2 id="Step-7-Implementing-the-API-DELETE-request"><a href="#Step-7-Implementing-the-API-DELETE-request" class="headerlink" title="Step 7 - Implementing the API - DELETE request"></a>Step 7 - Implementing the API - DELETE request</h2><p>In this step, you will implement our last API call, which will allow the user to delete a certain coral by its catalog number.</p><p>Bare in mind that the note I made on the last step is relevant here as well.<br>A reminder:<br>&lt;$&gt;[note]<br><strong>Note:</strong> This is not necessarily a behaviour you’d want to implement, at least not for every user.<br>I am merely showing this for educational purposes.<br>&lt;$&gt;</p><p>In this API call you would also want to verify the user’s input since they might provide a coral catalog number that doesn’t exist in our database, then delete the matching coral and return a JSON response with a matching status code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api.py]</span><br><span class="line"><span class="meta">@app.delete(<span class="params"><span class="string">&quot;/delete-coral/&#123;catalog_number&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_coral</span>(<span class="params">catalog_number: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> get_coral_by_catalog_number_db(catalog_number):</span><br><span class="line">        <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Coral Not Found&#x27;</span>&#125;,</span><br><span class="line">                            status_code=HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    delete_coral_db(catalog_number)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Coral Deleted Successfully&#x27;</span>&#125;,</span><br><span class="line">                        status_code=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>One last time, let’s take a look at the database query function, <code>delete_coral_db</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[label database.py]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_coral_db</span>(<span class="params">catalog_number: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">with</span> CoralDatabase(DB_FILENAME) <span class="keyword">as</span> cursor:</span><br><span class="line">        cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        DELETE FROM Corals WHERE catalog_number = ?&#x27;&#x27;&#x27;</span>, (catalog_number,))</span><br></pre></td></tr></table></figure><p>Open the file <code>corals-api.py</code> and import the function you just implemented at the top of <code>corals-api.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[label corals-api]</span><br><span class="line">...</span><br><span class="line">from database import delete_coral_db</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>That concludes the DELETE request for our API, and the implementation of our API.</p><p>In the next step you will shortly revisit how to run our API.</p><h2 id="Step-8-Execute-your-API"><a href="#Step-8-Execute-your-API" class="headerlink" title="Step 8 - Execute your API"></a>Step 8 - Execute your API</h2><p>To run your API, simply use the following command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn corals-api:app --reload</span><br></pre></td></tr></table></figure><p>Where </p><ul><li><code>corals-api</code> stands for the file containing the API calls.</li><li><code>app</code> stands for the variable name that holds the <code>FastAPI</code> object.</li><li><code>--reload</code> will reload the API whenever you save changes to your file.</li></ul><p>Note that fastapi uses swagger for the UI, which means that once you run the above command, you could either access <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> and use the API in a manual fashion (typing out the URL or using other tools such as postman) or access <a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a> where you will have a convinent UI to execute all your API calls.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article, you built an API including all CRUD operations completely from scratch. Now you can pick your own dataset and use cases and start implementing your own FastAPI from scratch.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;FastAPI is a relatively new an</summary>
      
    
    
    
    <category term="API" scheme="https://eliran-turgeman.github.io/categories/API/"/>
    
    <category term="Project" scheme="https://eliran-turgeman.github.io/categories/API/Project/"/>
    
    <category term="Python" scheme="https://eliran-turgeman.github.io/categories/API/Project/Python/"/>
    
    
    <category term="API" scheme="https://eliran-turgeman.github.io/tags/API/"/>
    
    <category term="FastAPI" scheme="https://eliran-turgeman.github.io/tags/FastAPI/"/>
    
    <category term="Python" scheme="https://eliran-turgeman.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
